
hello_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000278  00800060  00001506  0000159a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008002d8  008002d8  00001812  2**0
                  ALLOC
  3 .stab         0000525c  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccf  00000000  00000000  00006a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000873f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 03 	call	0x602	; 0x602 <main>
      8a:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_lcd>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	84 e3       	ldi	r24, 0x34	; 52
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	24 e3       	ldi	r18, 0x34	; 52
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	f9 01       	movw	r30, r18
      a4:	20 81       	ld	r18, Z
      a6:	27 60       	ori	r18, 0x07	; 7
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18
      ac:	8a e3       	ldi	r24, 0x3A	; 58
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	2f ef       	ldi	r18, 0xFF	; 255
      b2:	fc 01       	movw	r30, r24
      b4:	20 83       	st	Z, r18
      b6:	86 e0       	ldi	r24, 0x06	; 6
      b8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
      bc:	8c e0       	ldi	r24, 0x0C	; 12
      be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
      c2:	0e 94 6a 00 	call	0xd4	; 0xd4 <clrram_lcd>
      c6:	61 e0       	ldi	r22, 0x01	; 1
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 c3 02 	call	0x586	; 0x586 <gotoxy>
      ce:	df 91       	pop	r29
      d0:	cf 91       	pop	r28
      d2:	08 95       	ret

000000d4 <clrram_lcd>:
}
//***********************************
//填充液晶DDRAM全为空格
//**********************************
void clrram_lcd (void)
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
	wr_i_lcd(0x30);
      dc:	80 e3       	ldi	r24, 0x30	; 48
      de:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
	wr_i_lcd(0x01);
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
}
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <wr_d_lcd>:
//***********************************
//对液晶写数据
//content为要写入的数据
//***********************************
void wr_d_lcd(unsigned char content)
{
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	69 97       	sbiw	r28, 0x19	; 25
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
     102:	89 8f       	std	Y+25, r24	; 0x19
	busy_lcd();
     104:	0e 94 71 02 	call	0x4e2	; 0x4e2 <busy_lcd>
	set_bit(RS_PORT,RS_BIT);
     108:	85 e3       	ldi	r24, 0x35	; 53
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	25 e3       	ldi	r18, 0x35	; 53
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	21 60       	ori	r18, 0x01	; 1
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
	clr_bit(RW_PORT,RW_BIT);
     11a:	85 e3       	ldi	r24, 0x35	; 53
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	25 e3       	ldi	r18, 0x35	; 53
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	2d 7f       	andi	r18, 0xFD	; 253
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
	lcddata=content;
     12c:	8b e3       	ldi	r24, 0x3B	; 59
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	29 8d       	ldd	r18, Y+25	; 0x19
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
	set_bit(E_PORT,E_BIT);
     136:	85 e3       	ldi	r24, 0x35	; 53
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	25 e3       	ldi	r18, 0x35	; 53
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	24 60       	ori	r18, 0x04	; 4
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	a0 e2       	ldi	r26, 0x20	; 32
     14e:	b1 e4       	ldi	r27, 0x41	; 65
     150:	89 83       	std	Y+1, r24	; 0x01
     152:	9a 83       	std	Y+2, r25	; 0x02
     154:	ab 83       	std	Y+3, r26	; 0x03
     156:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     158:	2a ef       	ldi	r18, 0xFA	; 250
     15a:	3d ee       	ldi	r19, 0xED	; 237
     15c:	4b e6       	ldi	r20, 0x6B	; 107
     15e:	50 e4       	ldi	r21, 0x40	; 64
     160:	69 81       	ldd	r22, Y+1	; 0x01
     162:	7a 81       	ldd	r23, Y+2	; 0x02
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	8d 83       	std	Y+5, r24	; 0x05
     172:	9e 83       	std	Y+6, r25	; 0x06
     174:	af 83       	std	Y+7, r26	; 0x07
     176:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	40 e8       	ldi	r20, 0x80	; 128
     17e:	5f e3       	ldi	r21, 0x3F	; 63
     180:	6d 81       	ldd	r22, Y+5	; 0x05
     182:	7e 81       	ldd	r23, Y+6	; 0x06
     184:	8f 81       	ldd	r24, Y+7	; 0x07
     186:	98 85       	ldd	r25, Y+8	; 0x08
     188:	0e 94 4c 06 	call	0xc98	; 0xc98 <__cmpsf2>
     18c:	88 23       	and	r24, r24
     18e:	1c f4       	brge	.+6      	; 0x196 <wr_d_lcd+0xa8>
		__ticks = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	89 87       	std	Y+9, r24	; 0x09
     194:	91 c0       	rjmp	.+290    	; 0x2b8 <wr_d_lcd+0x1ca>
	else if (__tmp > 255)
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	4f e7       	ldi	r20, 0x7F	; 127
     19c:	53 e4       	ldi	r21, 0x43	; 67
     19e:	6d 81       	ldd	r22, Y+5	; 0x05
     1a0:	7e 81       	ldd	r23, Y+6	; 0x06
     1a2:	8f 81       	ldd	r24, Y+7	; 0x07
     1a4:	98 85       	ldd	r25, Y+8	; 0x08
     1a6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__gesf2>
     1aa:	18 16       	cp	r1, r24
     1ac:	0c f0       	brlt	.+2      	; 0x1b0 <wr_d_lcd+0xc2>
     1ae:	7b c0       	rjmp	.+246    	; 0x2a6 <wr_d_lcd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	4a e7       	ldi	r20, 0x7A	; 122
     1b6:	54 e4       	ldi	r21, 0x44	; 68
     1b8:	69 81       	ldd	r22, Y+1	; 0x01
     1ba:	7a 81       	ldd	r23, Y+2	; 0x02
     1bc:	8b 81       	ldd	r24, Y+3	; 0x03
     1be:	9c 81       	ldd	r25, Y+4	; 0x04
     1c0:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     1c4:	dc 01       	movw	r26, r24
     1c6:	cb 01       	movw	r24, r22
     1c8:	8a 87       	std	Y+10, r24	; 0x0a
     1ca:	9b 87       	std	Y+11, r25	; 0x0b
     1cc:	ac 87       	std	Y+12, r26	; 0x0c
     1ce:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     1d0:	2d ec       	ldi	r18, 0xCD	; 205
     1d2:	3c ec       	ldi	r19, 0xCC	; 204
     1d4:	4c e2       	ldi	r20, 0x2C	; 44
     1d6:	55 e4       	ldi	r21, 0x45	; 69
     1d8:	6a 85       	ldd	r22, Y+10	; 0x0a
     1da:	7b 85       	ldd	r23, Y+11	; 0x0b
     1dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     1de:	9d 85       	ldd	r25, Y+13	; 0x0d
     1e0:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	8e 87       	std	Y+14, r24	; 0x0e
     1ea:	9f 87       	std	Y+15, r25	; 0x0f
     1ec:	a8 8b       	std	Y+16, r26	; 0x10
     1ee:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e8       	ldi	r20, 0x80	; 128
     1f6:	5f e3       	ldi	r21, 0x3F	; 63
     1f8:	6e 85       	ldd	r22, Y+14	; 0x0e
     1fa:	7f 85       	ldd	r23, Y+15	; 0x0f
     1fc:	88 89       	ldd	r24, Y+16	; 0x10
     1fe:	99 89       	ldd	r25, Y+17	; 0x11
     200:	0e 94 4c 06 	call	0xc98	; 0xc98 <__cmpsf2>
     204:	88 23       	and	r24, r24
     206:	2c f4       	brge	.+10     	; 0x212 <wr_d_lcd+0x124>
		__ticks = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	9b 8b       	std	Y+19, r25	; 0x13
     20e:	8a 8b       	std	Y+18, r24	; 0x12
     210:	3f c0       	rjmp	.+126    	; 0x290 <wr_d_lcd+0x1a2>
	else if (__tmp > 65535)
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	3f ef       	ldi	r19, 0xFF	; 255
     216:	4f e7       	ldi	r20, 0x7F	; 127
     218:	57 e4       	ldi	r21, 0x47	; 71
     21a:	6e 85       	ldd	r22, Y+14	; 0x0e
     21c:	7f 85       	ldd	r23, Y+15	; 0x0f
     21e:	88 89       	ldd	r24, Y+16	; 0x10
     220:	99 89       	ldd	r25, Y+17	; 0x11
     222:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__gesf2>
     226:	18 16       	cp	r1, r24
     228:	4c f5       	brge	.+82     	; 0x27c <wr_d_lcd+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e2       	ldi	r20, 0x20	; 32
     230:	51 e4       	ldi	r21, 0x41	; 65
     232:	6a 85       	ldd	r22, Y+10	; 0x0a
     234:	7b 85       	ldd	r23, Y+11	; 0x0b
     236:	8c 85       	ldd	r24, Y+12	; 0x0c
     238:	9d 85       	ldd	r25, Y+13	; 0x0d
     23a:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	9b 8b       	std	Y+19, r25	; 0x13
     250:	8a 8b       	std	Y+18, r24	; 0x12
     252:	0f c0       	rjmp	.+30     	; 0x272 <wr_d_lcd+0x184>
     254:	84 e1       	ldi	r24, 0x14	; 20
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	9d 8b       	std	Y+21, r25	; 0x15
     25a:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     25c:	8c 89       	ldd	r24, Y+20	; 0x14
     25e:	9d 89       	ldd	r25, Y+21	; 0x15
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <wr_d_lcd+0x172>
     264:	9d 8b       	std	Y+21, r25	; 0x15
     266:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     268:	8a 89       	ldd	r24, Y+18	; 0x12
     26a:	9b 89       	ldd	r25, Y+19	; 0x13
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	9b 8b       	std	Y+19, r25	; 0x13
     270:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     272:	8a 89       	ldd	r24, Y+18	; 0x12
     274:	9b 89       	ldd	r25, Y+19	; 0x13
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	69 f7       	brne	.-38     	; 0x254 <wr_d_lcd+0x166>
     27a:	24 c0       	rjmp	.+72     	; 0x2c4 <wr_d_lcd+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     27c:	6e 85       	ldd	r22, Y+14	; 0x0e
     27e:	7f 85       	ldd	r23, Y+15	; 0x0f
     280:	88 89       	ldd	r24, Y+16	; 0x10
     282:	99 89       	ldd	r25, Y+17	; 0x11
     284:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	9b 8b       	std	Y+19, r25	; 0x13
     28e:	8a 8b       	std	Y+18, r24	; 0x12
     290:	8a 89       	ldd	r24, Y+18	; 0x12
     292:	9b 89       	ldd	r25, Y+19	; 0x13
     294:	9f 8b       	std	Y+23, r25	; 0x17
     296:	8e 8b       	std	Y+22, r24	; 0x16
     298:	8e 89       	ldd	r24, Y+22	; 0x16
     29a:	9f 89       	ldd	r25, Y+23	; 0x17
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <wr_d_lcd+0x1ae>
     2a0:	9f 8b       	std	Y+23, r25	; 0x17
     2a2:	8e 8b       	std	Y+22, r24	; 0x16
     2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <wr_d_lcd+0x1d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2a6:	6d 81       	ldd	r22, Y+5	; 0x05
     2a8:	7e 81       	ldd	r23, Y+6	; 0x06
     2aa:	8f 81       	ldd	r24, Y+7	; 0x07
     2ac:	98 85       	ldd	r25, Y+8	; 0x08
     2ae:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     2b2:	dc 01       	movw	r26, r24
     2b4:	cb 01       	movw	r24, r22
     2b6:	89 87       	std	Y+9, r24	; 0x09
     2b8:	89 85       	ldd	r24, Y+9	; 0x09
     2ba:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2bc:	88 8d       	ldd	r24, Y+24	; 0x18
     2be:	8a 95       	dec	r24
     2c0:	f1 f7       	brne	.-4      	; 0x2be <wr_d_lcd+0x1d0>
     2c2:	88 8f       	std	Y+24, r24	; 0x18
	_delay_us(10);
	clr_bit(E_PORT,E_BIT);
     2c4:	85 e3       	ldi	r24, 0x35	; 53
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	25 e3       	ldi	r18, 0x35	; 53
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	f9 01       	movw	r30, r18
     2ce:	20 81       	ld	r18, Z
     2d0:	2b 7f       	andi	r18, 0xFB	; 251
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
}
     2d6:	69 96       	adiw	r28, 0x19	; 25
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <wr_i_lcd>:
//********************************
//对液晶写指令
//content为要写入的指令代码
//*****************************
void wr_i_lcd(unsigned char content)
{
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	69 97       	sbiw	r28, 0x19	; 25
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	89 8f       	std	Y+25, r24	; 0x19
	busy_lcd();
     2fe:	0e 94 71 02 	call	0x4e2	; 0x4e2 <busy_lcd>
	clr_bit(RS_PORT,RS_BIT);
     302:	85 e3       	ldi	r24, 0x35	; 53
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	25 e3       	ldi	r18, 0x35	; 53
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f9 01       	movw	r30, r18
     30c:	20 81       	ld	r18, Z
     30e:	2e 7f       	andi	r18, 0xFE	; 254
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
    clr_bit(RW_PORT,RW_BIT);
     314:	85 e3       	ldi	r24, 0x35	; 53
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	25 e3       	ldi	r18, 0x35	; 53
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	f9 01       	movw	r30, r18
     31e:	20 81       	ld	r18, Z
     320:	2d 7f       	andi	r18, 0xFD	; 253
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
	lcddata=content;
     326:	8b e3       	ldi	r24, 0x3B	; 59
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	29 8d       	ldd	r18, Y+25	; 0x19
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
	set_bit(E_PORT,E_BIT);
     330:	85 e3       	ldi	r24, 0x35	; 53
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	25 e3       	ldi	r18, 0x35	; 53
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	20 81       	ld	r18, Z
     33c:	24 60       	ori	r18, 0x04	; 4
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	a0 e2       	ldi	r26, 0x20	; 32
     348:	b1 e4       	ldi	r27, 0x41	; 65
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	9a 83       	std	Y+2, r25	; 0x02
     34e:	ab 83       	std	Y+3, r26	; 0x03
     350:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     352:	2a ef       	ldi	r18, 0xFA	; 250
     354:	3d ee       	ldi	r19, 0xED	; 237
     356:	4b e6       	ldi	r20, 0x6B	; 107
     358:	50 e4       	ldi	r21, 0x40	; 64
     35a:	69 81       	ldd	r22, Y+1	; 0x01
     35c:	7a 81       	ldd	r23, Y+2	; 0x02
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	9c 81       	ldd	r25, Y+4	; 0x04
     362:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	8d 83       	std	Y+5, r24	; 0x05
     36c:	9e 83       	std	Y+6, r25	; 0x06
     36e:	af 83       	std	Y+7, r26	; 0x07
     370:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	40 e8       	ldi	r20, 0x80	; 128
     378:	5f e3       	ldi	r21, 0x3F	; 63
     37a:	6d 81       	ldd	r22, Y+5	; 0x05
     37c:	7e 81       	ldd	r23, Y+6	; 0x06
     37e:	8f 81       	ldd	r24, Y+7	; 0x07
     380:	98 85       	ldd	r25, Y+8	; 0x08
     382:	0e 94 4c 06 	call	0xc98	; 0xc98 <__cmpsf2>
     386:	88 23       	and	r24, r24
     388:	1c f4       	brge	.+6      	; 0x390 <wr_i_lcd+0xa8>
		__ticks = 1;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	89 87       	std	Y+9, r24	; 0x09
     38e:	91 c0       	rjmp	.+290    	; 0x4b2 <__stack+0x53>
	else if (__tmp > 255)
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	4f e7       	ldi	r20, 0x7F	; 127
     396:	53 e4       	ldi	r21, 0x43	; 67
     398:	6d 81       	ldd	r22, Y+5	; 0x05
     39a:	7e 81       	ldd	r23, Y+6	; 0x06
     39c:	8f 81       	ldd	r24, Y+7	; 0x07
     39e:	98 85       	ldd	r25, Y+8	; 0x08
     3a0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__gesf2>
     3a4:	18 16       	cp	r1, r24
     3a6:	0c f0       	brlt	.+2      	; 0x3aa <wr_i_lcd+0xc2>
     3a8:	7b c0       	rjmp	.+246    	; 0x4a0 <__stack+0x41>
	{
		_delay_ms(__us / 1000.0);
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	4a e7       	ldi	r20, 0x7A	; 122
     3b0:	54 e4       	ldi	r21, 0x44	; 68
     3b2:	69 81       	ldd	r22, Y+1	; 0x01
     3b4:	7a 81       	ldd	r23, Y+2	; 0x02
     3b6:	8b 81       	ldd	r24, Y+3	; 0x03
     3b8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ba:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	8a 87       	std	Y+10, r24	; 0x0a
     3c4:	9b 87       	std	Y+11, r25	; 0x0b
     3c6:	ac 87       	std	Y+12, r26	; 0x0c
     3c8:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3ca:	2d ec       	ldi	r18, 0xCD	; 205
     3cc:	3c ec       	ldi	r19, 0xCC	; 204
     3ce:	4c e2       	ldi	r20, 0x2C	; 44
     3d0:	55 e4       	ldi	r21, 0x45	; 69
     3d2:	6a 85       	ldd	r22, Y+10	; 0x0a
     3d4:	7b 85       	ldd	r23, Y+11	; 0x0b
     3d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     3d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     3da:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	8e 87       	std	Y+14, r24	; 0x0e
     3e4:	9f 87       	std	Y+15, r25	; 0x0f
     3e6:	a8 8b       	std	Y+16, r26	; 0x10
     3e8:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e8       	ldi	r20, 0x80	; 128
     3f0:	5f e3       	ldi	r21, 0x3F	; 63
     3f2:	6e 85       	ldd	r22, Y+14	; 0x0e
     3f4:	7f 85       	ldd	r23, Y+15	; 0x0f
     3f6:	88 89       	ldd	r24, Y+16	; 0x10
     3f8:	99 89       	ldd	r25, Y+17	; 0x11
     3fa:	0e 94 4c 06 	call	0xc98	; 0xc98 <__cmpsf2>
     3fe:	88 23       	and	r24, r24
     400:	2c f4       	brge	.+10     	; 0x40c <wr_i_lcd+0x124>
		__ticks = 1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	9b 8b       	std	Y+19, r25	; 0x13
     408:	8a 8b       	std	Y+18, r24	; 0x12
     40a:	3f c0       	rjmp	.+126    	; 0x48a <__stack+0x2b>
	else if (__tmp > 65535)
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	3f ef       	ldi	r19, 0xFF	; 255
     410:	4f e7       	ldi	r20, 0x7F	; 127
     412:	57 e4       	ldi	r21, 0x47	; 71
     414:	6e 85       	ldd	r22, Y+14	; 0x0e
     416:	7f 85       	ldd	r23, Y+15	; 0x0f
     418:	88 89       	ldd	r24, Y+16	; 0x10
     41a:	99 89       	ldd	r25, Y+17	; 0x11
     41c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__gesf2>
     420:	18 16       	cp	r1, r24
     422:	4c f5       	brge	.+82     	; 0x476 <__stack+0x17>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e2       	ldi	r20, 0x20	; 32
     42a:	51 e4       	ldi	r21, 0x41	; 65
     42c:	6a 85       	ldd	r22, Y+10	; 0x0a
     42e:	7b 85       	ldd	r23, Y+11	; 0x0b
     430:	8c 85       	ldd	r24, Y+12	; 0x0c
     432:	9d 85       	ldd	r25, Y+13	; 0x0d
     434:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	9b 8b       	std	Y+19, r25	; 0x13
     44a:	8a 8b       	std	Y+18, r24	; 0x12
     44c:	0f c0       	rjmp	.+30     	; 0x46c <__stack+0xd>
     44e:	84 e1       	ldi	r24, 0x14	; 20
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	9d 8b       	std	Y+21, r25	; 0x15
     454:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	8c 89       	ldd	r24, Y+20	; 0x14
     458:	9d 89       	ldd	r25, Y+21	; 0x15
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <wr_i_lcd+0x172>
     45e:	9d 8b       	std	Y+21, r25	; 0x15
     460:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     462:	8a 89       	ldd	r24, Y+18	; 0x12
     464:	9b 89       	ldd	r25, Y+19	; 0x13
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	9b 8b       	std	Y+19, r25	; 0x13
     46a:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46c:	8a 89       	ldd	r24, Y+18	; 0x12
     46e:	9b 89       	ldd	r25, Y+19	; 0x13
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	69 f7       	brne	.-38     	; 0x44e <wr_i_lcd+0x166>
     474:	24 c0       	rjmp	.+72     	; 0x4be <__stack+0x5f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     476:	6e 85       	ldd	r22, Y+14	; 0x0e
     478:	7f 85       	ldd	r23, Y+15	; 0x0f
     47a:	88 89       	ldd	r24, Y+16	; 0x10
     47c:	99 89       	ldd	r25, Y+17	; 0x11
     47e:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	9b 8b       	std	Y+19, r25	; 0x13
     488:	8a 8b       	std	Y+18, r24	; 0x12
     48a:	8a 89       	ldd	r24, Y+18	; 0x12
     48c:	9b 89       	ldd	r25, Y+19	; 0x13
     48e:	9f 8b       	std	Y+23, r25	; 0x17
     490:	8e 8b       	std	Y+22, r24	; 0x16
     492:	8e 89       	ldd	r24, Y+22	; 0x16
     494:	9f 89       	ldd	r25, Y+23	; 0x17
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <__stack+0x37>
     49a:	9f 8b       	std	Y+23, r25	; 0x17
     49c:	8e 8b       	std	Y+22, r24	; 0x16
     49e:	0f c0       	rjmp	.+30     	; 0x4be <__stack+0x5f>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4a0:	6d 81       	ldd	r22, Y+5	; 0x05
     4a2:	7e 81       	ldd	r23, Y+6	; 0x06
     4a4:	8f 81       	ldd	r24, Y+7	; 0x07
     4a6:	98 85       	ldd	r25, Y+8	; 0x08
     4a8:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	89 87       	std	Y+9, r24	; 0x09
     4b2:	89 85       	ldd	r24, Y+9	; 0x09
     4b4:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4b6:	88 8d       	ldd	r24, Y+24	; 0x18
     4b8:	8a 95       	dec	r24
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__stack+0x59>
     4bc:	88 8f       	std	Y+24, r24	; 0x18
	_delay_us(10);
	clr_bit(E_PORT,E_BIT);
     4be:	85 e3       	ldi	r24, 0x35	; 53
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	25 e3       	ldi	r18, 0x35	; 53
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	f9 01       	movw	r30, r18
     4c8:	20 81       	ld	r18, Z
     4ca:	2b 7f       	andi	r18, 0xFB	; 251
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
}
     4d0:	69 96       	adiw	r28, 0x19	; 25
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <busy_lcd>:
//********************************
//液晶检测忙状态
//在写入之前必须执行
//********************************
void busy_lcd(void)
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
  lcddata=0xff;
     4ea:	8b e3       	ldi	r24, 0x3B	; 59
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	2f ef       	ldi	r18, 0xFF	; 255
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
  clr_bit(RS_PORT,RS_BIT);
     4f4:	85 e3       	ldi	r24, 0x35	; 53
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	25 e3       	ldi	r18, 0x35	; 53
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	2e 7f       	andi	r18, 0xFE	; 254
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
  set_bit(RW_PORT,RW_BIT);
     506:	85 e3       	ldi	r24, 0x35	; 53
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	25 e3       	ldi	r18, 0x35	; 53
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	22 60       	ori	r18, 0x02	; 2
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
  set_bit(E_PORT,E_BIT);
     518:	85 e3       	ldi	r24, 0x35	; 53
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	25 e3       	ldi	r18, 0x35	; 53
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	f9 01       	movw	r30, r18
     522:	20 81       	ld	r18, Z
     524:	24 60       	ori	r18, 0x04	; 4
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
  DDRA &= ~_BV(busy_BIT);
     52a:	8a e3       	ldi	r24, 0x3A	; 58
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	2a e3       	ldi	r18, 0x3A	; 58
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	f9 01       	movw	r30, r18
     534:	20 81       	ld	r18, Z
     536:	2f 77       	andi	r18, 0x7F	; 127
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18
  clr_bit(busy_PORT,busy_BIT);
     53c:	8b e3       	ldi	r24, 0x3B	; 59
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	2b e3       	ldi	r18, 0x3B	; 59
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	2f 77       	andi	r18, 0x7F	; 127
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
  while(test_bit(busy_PORT,busy_BIT));
     54e:	00 00       	nop
     550:	8b e3       	ldi	r24, 0x3B	; 59
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	88 23       	and	r24, r24
     55a:	d4 f3       	brlt	.-12     	; 0x550 <busy_lcd+0x6e>
  DDRA |= _BV(busy_BIT);
     55c:	8a e3       	ldi	r24, 0x3A	; 58
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2a e3       	ldi	r18, 0x3A	; 58
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	f9 01       	movw	r30, r18
     566:	20 81       	ld	r18, Z
     568:	20 68       	ori	r18, 0x80	; 128
     56a:	fc 01       	movw	r30, r24
     56c:	20 83       	st	Z, r18
  clr_bit(E_PORT,E_BIT);
     56e:	85 e3       	ldi	r24, 0x35	; 53
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	25 e3       	ldi	r18, 0x35	; 53
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	f9 01       	movw	r30, r18
     578:	20 81       	ld	r18, Z
     57a:	2b 7f       	andi	r18, 0xFB	; 251
     57c:	fc 01       	movw	r30, r24
     57e:	20 83       	st	Z, r18
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <gotoxy>:
//********************************
//指定要显示字符的坐标
//*******************************
void gotoxy(unsigned char y, unsigned char x)
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	00 d0       	rcall	.+0      	; 0x58c <gotoxy+0x6>
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	6a 83       	std	Y+2, r22	; 0x02
	if(y==1)
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	21 f4       	brne	.+8      	; 0x5a2 <gotoxy+0x1c>
		wr_i_lcd(0x80|x);
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
	if(y==2)
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	21 f4       	brne	.+8      	; 0x5b0 <gotoxy+0x2a>
        wr_i_lcd(0x90|x);
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	80 69       	ori	r24, 0x90	; 144
     5ac:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
	if(y==3)
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	83 30       	cpi	r24, 0x03	; 3
     5b4:	29 f4       	brne	.+10     	; 0x5c0 <gotoxy+0x3a>
		wr_i_lcd((0x80|x)+8);
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	80 68       	ori	r24, 0x80	; 128
     5ba:	88 5f       	subi	r24, 0xF8	; 248
     5bc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
	if(y==4)
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	84 30       	cpi	r24, 0x04	; 4
     5c4:	29 f4       	brne	.+10     	; 0x5d0 <gotoxy+0x4a>
        wr_i_lcd((0x90|x)+8);
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	80 69       	ori	r24, 0x90	; 144
     5ca:	88 5f       	subi	r24, 0xF8	; 248
     5cc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wr_i_lcd>
}
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <lcm12864_putchar_printf>:
//**********************************
//液晶显示字符串程序
//**********************************
int lcm12864_putchar_printf(char var, FILE *stream)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <lcm12864_putchar_printf+0x6>
     5e0:	1f 92       	push	r1
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	7b 83       	std	Y+3, r23	; 0x03
     5ea:	6a 83       	std	Y+2, r22	; 0x02
	// translate \n to \r for br@y++ terminal
	    //if (var == '\n') wr_d_lcd('\n');
	    wr_d_lcd(var);
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	0e 94 77 00 	call	0xee	; 0xee <wr_d_lcd>
	    return 0;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
}
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <main>:
#define USART_BAUD 19200
#define MYUBRR F_CPU/16/USART_BAUD-1

static FILE usart_stdout =  FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);
static FILE oled_stdout =  FDEV_SETUP_STREAM(oled_putchar_printf, NULL, _FDEV_SETUP_WRITE);
int main(void){
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	60 97       	sbiw	r28, 0x10	; 16
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	int temp;
	//stdout = &usart_stdout;
	usart_init(MYUBRR);
     616:	83 e2       	ldi	r24, 0x23	; 35
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <usart_init>
	//init_lcd();
	oled_init();
     61e:	0e 94 40 04 	call	0x880	; 0x880 <oled_init>
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	a8 ec       	ldi	r26, 0xC8	; 200
     628:	b2 e4       	ldi	r27, 0x42	; 66
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	9c 83       	std	Y+4, r25	; 0x04
     62e:	ad 83       	std	Y+5, r26	; 0x05
     630:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     632:	2d ec       	ldi	r18, 0xCD	; 205
     634:	3c ec       	ldi	r19, 0xCC	; 204
     636:	4c e2       	ldi	r20, 0x2C	; 44
     638:	55 e4       	ldi	r21, 0x45	; 69
     63a:	6b 81       	ldd	r22, Y+3	; 0x03
     63c:	7c 81       	ldd	r23, Y+4	; 0x04
     63e:	8d 81       	ldd	r24, Y+5	; 0x05
     640:	9e 81       	ldd	r25, Y+6	; 0x06
     642:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	8f 83       	std	Y+7, r24	; 0x07
     64c:	98 87       	std	Y+8, r25	; 0x08
     64e:	a9 87       	std	Y+9, r26	; 0x09
     650:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e8       	ldi	r20, 0x80	; 128
     658:	5f e3       	ldi	r21, 0x3F	; 63
     65a:	6f 81       	ldd	r22, Y+7	; 0x07
     65c:	78 85       	ldd	r23, Y+8	; 0x08
     65e:	89 85       	ldd	r24, Y+9	; 0x09
     660:	9a 85       	ldd	r25, Y+10	; 0x0a
     662:	0e 94 4c 06 	call	0xc98	; 0xc98 <__cmpsf2>
     666:	88 23       	and	r24, r24
     668:	2c f4       	brge	.+10     	; 0x674 <main+0x72>
		__ticks = 1;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	9c 87       	std	Y+12, r25	; 0x0c
     670:	8b 87       	std	Y+11, r24	; 0x0b
     672:	3f c0       	rjmp	.+126    	; 0x6f2 <main+0xf0>
	else if (__tmp > 65535)
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	4f e7       	ldi	r20, 0x7F	; 127
     67a:	57 e4       	ldi	r21, 0x47	; 71
     67c:	6f 81       	ldd	r22, Y+7	; 0x07
     67e:	78 85       	ldd	r23, Y+8	; 0x08
     680:	89 85       	ldd	r24, Y+9	; 0x09
     682:	9a 85       	ldd	r25, Y+10	; 0x0a
     684:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__gesf2>
     688:	18 16       	cp	r1, r24
     68a:	4c f5       	brge	.+82     	; 0x6de <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e2       	ldi	r20, 0x20	; 32
     692:	51 e4       	ldi	r21, 0x41	; 65
     694:	6b 81       	ldd	r22, Y+3	; 0x03
     696:	7c 81       	ldd	r23, Y+4	; 0x04
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	9e 81       	ldd	r25, Y+6	; 0x06
     69c:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	bc 01       	movw	r22, r24
     6a6:	cd 01       	movw	r24, r26
     6a8:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	9c 87       	std	Y+12, r25	; 0x0c
     6b2:	8b 87       	std	Y+11, r24	; 0x0b
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <main+0xd2>
     6b6:	84 e1       	ldi	r24, 0x14	; 20
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	9e 87       	std	Y+14, r25	; 0x0e
     6bc:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6be:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c0:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <main+0xc0>
     6c6:	9e 87       	std	Y+14, r25	; 0x0e
     6c8:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     6cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	9c 87       	std	Y+12, r25	; 0x0c
     6d2:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	69 f7       	brne	.-38     	; 0x6b6 <main+0xb4>
     6dc:	14 c0       	rjmp	.+40     	; 0x706 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6de:	6f 81       	ldd	r22, Y+7	; 0x07
     6e0:	78 85       	ldd	r23, Y+8	; 0x08
     6e2:	89 85       	ldd	r24, Y+9	; 0x09
     6e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e6:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fixunssfsi>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	9c 87       	std	Y+12, r25	; 0x0c
     6f0:	8b 87       	std	Y+11, r24	; 0x0b
     6f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     6f4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6f6:	98 8b       	std	Y+16, r25	; 0x10
     6f8:	8f 87       	std	Y+15, r24	; 0x0f
     6fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     6fc:	98 89       	ldd	r25, Y+16	; 0x10
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <main+0xfc>
     702:	98 8b       	std	Y+16, r25	; 0x10
     704:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	oled_init();
     706:	0e 94 40 04 	call	0x880	; 0x880 <oled_init>
	oled_clear();
     70a:	0e 94 57 05 	call	0xaae	; 0xaae <oled_clear>
	oled_putstr("hello this is a ridiculously long long text string! enjoy it ! only for testing the line character alignment. I love you!!!");
     70e:	8c e7       	ldi	r24, 0x7C	; 124
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 39 05 	call	0xa72	; 0xa72 <oled_putstr>

	while(1){
		temp = usart_getchar();
     716:	0e 94 02 06 	call	0xc04	; 0xc04 <usart_getchar>
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	9a 83       	std	Y+2, r25	; 0x02
     720:	89 83       	std	Y+1, r24	; 0x01
		usart_putchar(temp);
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart_putchar>
		if(temp==0x1B) {
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	8b 31       	cpi	r24, 0x1B	; 27
     72e:	91 05       	cpc	r25, r1
     730:	19 f4       	brne	.+6      	; 0x738 <main+0x136>
			oled_clear();// ESC clear
     732:	0e 94 57 05 	call	0xaae	; 0xaae <oled_clear>
     736:	33 c0       	rjmp	.+102    	; 0x79e <main+0x19c>
		} else if(temp == 0x5c){
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	8c 35       	cpi	r24, 0x5C	; 92
     73e:	91 05       	cpc	r25, r1
     740:	19 f4       	brne	.+6      	; 0x748 <main+0x146>
			oled_set_inverse();
     742:	0e 94 25 05 	call	0xa4a	; 0xa4a <oled_set_inverse>
     746:	2b c0       	rjmp	.+86     	; 0x79e <main+0x19c>
		} else if(temp == 0x7c){
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	8c 37       	cpi	r24, 0x7C	; 124
     74e:	91 05       	cpc	r25, r1
     750:	19 f4       	brne	.+6      	; 0x758 <main+0x156>
			oled_set_normal();
     752:	0e 94 2f 05 	call	0xa5e	; 0xa5e <oled_set_normal>
     756:	23 c0       	rjmp	.+70     	; 0x79e <main+0x19c>
		} else
		{
			fprintf(&oled_stdout,"input: 0x%x, \'%c\'\n", temp,(char)temp);
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	29 2f       	mov	r18, r25
     760:	2f 93       	push	r18
     762:	8f 93       	push	r24
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	8f 93       	push	r24
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	8f 93       	push	r24
     76c:	88 ef       	ldi	r24, 0xF8	; 248
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	89 2f       	mov	r24, r25
     772:	8f 93       	push	r24
     774:	88 ef       	ldi	r24, 0xF8	; 248
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	8f 93       	push	r24
     77a:	8e e6       	ldi	r24, 0x6E	; 110
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	89 2f       	mov	r24, r25
     780:	8f 93       	push	r24
     782:	8e e6       	ldi	r24, 0x6E	; 110
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	8f 93       	push	r24
     788:	0e 94 c0 07 	call	0xf80	; 0xf80 <fprintf>
     78c:	8d b7       	in	r24, 0x3d	; 61
     78e:	9e b7       	in	r25, 0x3e	; 62
     790:	08 96       	adiw	r24, 0x08	; 8
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
		}

	}
     79c:	bc cf       	rjmp	.-136    	; 0x716 <main+0x114>
     79e:	bb cf       	rjmp	.-138    	; 0x716 <main+0x114>

000007a0 <oled_wr_cmd>:
#define MAX_CHARS_A_LINE (LINE_LENGTH/CHA_WIDTH)
// global var, representing the position.
volatile static uint8_t current_col_address = 0;// from from 0 to END_COL - START_COL
volatile static uint8_t current_pag_address = 0;// from from 0 to END_PAG - START_PAGE

void oled_wr_cmd(uint8_t cmd){
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	1f 92       	push	r1
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	89 83       	std	Y+1, r24	; 0x01
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	CS_LOW;
     7ac:	8b e3       	ldi	r24, 0x3B	; 59
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	2b e3       	ldi	r18, 0x3B	; 59
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	f9 01       	movw	r30, r18
     7b6:	20 81       	ld	r18, Z
     7b8:	2f 7b       	andi	r18, 0xBF	; 191
     7ba:	fc 01       	movw	r30, r24
     7bc:	20 83       	st	Z, r18
	DC_LOW;
     7be:	8b e3       	ldi	r24, 0x3B	; 59
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	2b e3       	ldi	r18, 0x3B	; 59
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	2f 7d       	andi	r18, 0xDF	; 223
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18
	WR_LOW;
     7d0:	8b e3       	ldi	r24, 0x3B	; 59
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	2b e3       	ldi	r18, 0x3B	; 59
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	2f 77       	andi	r18, 0x7F	; 127
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
	asm("nop");
     7e2:	00 00       	nop
	asm("nop");
     7e4:	00 00       	nop

	OLED_DATA_PORT = cmd;
     7e6:	88 e3       	ldi	r24, 0x38	; 56
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	29 81       	ldd	r18, Y+1	; 0x01
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
	asm("nop");
     7f0:	00 00       	nop
	asm("nop");
     7f2:	00 00       	nop

	WR_HIGH;
     7f4:	8b e3       	ldi	r24, 0x3B	; 59
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	2b e3       	ldi	r18, 0x3B	; 59
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	20 81       	ld	r18, Z
     800:	20 68       	ori	r18, 0x80	; 128
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
	asm("nop");
     806:	00 00       	nop
}
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <oled_wr_d>:

void oled_wr_d(uint8_t data){
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	1f 92       	push	r1
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	89 83       	std	Y+1, r24	; 0x01
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	CS_LOW;
     81c:	8b e3       	ldi	r24, 0x3B	; 59
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	2b e3       	ldi	r18, 0x3B	; 59
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	f9 01       	movw	r30, r18
     826:	20 81       	ld	r18, Z
     828:	2f 7b       	andi	r18, 0xBF	; 191
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
	DC_HIGH;
     82e:	8b e3       	ldi	r24, 0x3B	; 59
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	2b e3       	ldi	r18, 0x3B	; 59
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	f9 01       	movw	r30, r18
     838:	20 81       	ld	r18, Z
     83a:	20 62       	ori	r18, 0x20	; 32
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
	WR_LOW;
     840:	8b e3       	ldi	r24, 0x3B	; 59
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2b e3       	ldi	r18, 0x3B	; 59
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	f9 01       	movw	r30, r18
     84a:	20 81       	ld	r18, Z
     84c:	2f 77       	andi	r18, 0x7F	; 127
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18
	asm("nop");
     852:	00 00       	nop
	asm("nop");
     854:	00 00       	nop

	OLED_DATA_PORT = data;
     856:	88 e3       	ldi	r24, 0x38	; 56
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	29 81       	ldd	r18, Y+1	; 0x01
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
	asm("nop");
     860:	00 00       	nop
	asm("nop");
     862:	00 00       	nop

	WR_HIGH;
     864:	8b e3       	ldi	r24, 0x3B	; 59
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	2b e3       	ldi	r18, 0x3B	; 59
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	f9 01       	movw	r30, r18
     86e:	20 81       	ld	r18, Z
     870:	20 68       	ori	r18, 0x80	; 128
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
	asm("nop");
     876:	00 00       	nop
}
     878:	0f 90       	pop	r0
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <oled_init>:

void oled_init(void){
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
	// pin configuration
	OLED_DATA_DDR = 0xff;
     888:	87 e3       	ldi	r24, 0x37	; 55
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	2f ef       	ldi	r18, 0xFF	; 255
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
	set_bit(OLED_CS_DDR, OLED_CS_BIT);
     892:	8a e3       	ldi	r24, 0x3A	; 58
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	2a e3       	ldi	r18, 0x3A	; 58
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	f9 01       	movw	r30, r18
     89c:	20 81       	ld	r18, Z
     89e:	20 64       	ori	r18, 0x40	; 64
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
	set_bit(OLED_WR_DDR, OLED_WR_BIT);
     8a4:	8a e3       	ldi	r24, 0x3A	; 58
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	2a e3       	ldi	r18, 0x3A	; 58
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	f9 01       	movw	r30, r18
     8ae:	20 81       	ld	r18, Z
     8b0:	20 68       	ori	r18, 0x80	; 128
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
	set_bit(OLED_DC_DDR, OLED_DC_BIT);
     8b6:	8a e3       	ldi	r24, 0x3A	; 58
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	2a e3       	ldi	r18, 0x3A	; 58
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	f9 01       	movw	r30, r18
     8c0:	20 81       	ld	r18, Z
     8c2:	20 62       	ori	r18, 0x20	; 32
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18
	//
	oled_wr_cmd(0xae); // display off
     8c8:	8e ea       	ldi	r24, 0xAE	; 174
     8ca:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xa1); //segment remap
     8ce:	81 ea       	ldi	r24, 0xA1	; 161
     8d0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xda); //common pads hardware: alternative
     8d4:	8a ed       	ldi	r24, 0xDA	; 218
     8d6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x12);
     8da:	82 e1       	ldi	r24, 0x12	; 18
     8dc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xc8); //common output scan direction:com63~com0
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xa8); //multiplex ration mode:63
     8e6:	88 ea       	ldi	r24, 0xA8	; 168
     8e8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x3f);
     8ec:	8f e3       	ldi	r24, 0x3F	; 63
     8ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xd5); //display divide ratio/osc. freq. mode
     8f2:	85 ed       	ldi	r24, 0xD5	; 213
     8f4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x80);
     8f8:	80 e8       	ldi	r24, 0x80	; 128
     8fa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x81); //contrast control
     8fe:	81 e8       	ldi	r24, 0x81	; 129
     900:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xff); // highest contrast
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xd9); //set pre-charge period
     90a:	89 ed       	ldi	r24, 0xD9	; 217
     90c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x22);
     910:	82 e2       	ldi	r24, 0x22	; 34
     912:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x1f);
	oled_wr_cmd(0x10); // page mode
*/

	//
	oled_wr_cmd(0x20); //Set Memory Addressing Mode
     916:	80 e2       	ldi	r24, 0x20	; 32
     918:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x00); // page mode
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(7);
	*/
//	oled_wr_cmd(0x40); // start line


	oled_wr_cmd(0xdb); //VCOM deselect level mode
     922:	8b ed       	ldi	r24, 0xDB	; 219
     924:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x30);
     928:	80 e3       	ldi	r24, 0x30	; 48
     92a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xad); //master configuration
     92e:	8d ea       	ldi	r24, 0xAD	; 173
     930:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x00);
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xa4); //out follows RAM content
     93a:	84 ea       	ldi	r24, 0xA4	; 164
     93c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xa6); //set normal display
     940:	86 ea       	ldi	r24, 0xA6	; 166
     942:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xaf); // display on
     946:	8f ea       	ldi	r24, 0xAF	; 175
     948:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <oled_goto_xy>:

void oled_goto_xy(uint8_t col,uint8_t row){
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	00 d0       	rcall	.+0      	; 0x958 <oled_goto_xy+0x6>
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	6a 83       	std	Y+2, r22	; 0x02
	// input: 0 to max - min.
	current_col_address = col;
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	80 93 d8 02 	sts	0x02D8, r24
	current_pag_address = row;
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	80 93 d9 02 	sts	0x02D9, r24
//	oled_wr_cmd(0x40);
	oled_wr_cmd(0x21);// set col address
     96c:	81 e2       	ldi	r24, 0x21	; 33
     96e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(col + START_COL);
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	8a 5f       	subi	r24, 0xFA	; 250
     976:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(END_COL);
     97a:	89 e7       	ldi	r24, 0x79	; 121
     97c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x22);// set pag address
     980:	82 e2       	ldi	r24, 0x22	; 34
     982:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(row + START_PAGE);
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(END_PAGE);
     98c:	86 e0       	ldi	r24, 0x06	; 6
     98e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
}
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <oled_goto_nextln>:

void oled_goto_nextln(void){
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
	// input: 0 to max-min
	current_pag_address++;
     9a4:	80 91 d9 02 	lds	r24, 0x02D9
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	80 93 d9 02 	sts	0x02D9, r24
	if(current_pag_address > END_PAGE - START_PAGE)
     9ae:	80 91 d9 02 	lds	r24, 0x02D9
     9b2:	87 30       	cpi	r24, 0x07	; 7
     9b4:	10 f0       	brcs	.+4      	; 0x9ba <oled_goto_nextln+0x1e>
		current_pag_address = 0;
     9b6:	10 92 d9 02 	sts	0x02D9, r1
	oled_goto_xy(0, current_pag_address);
     9ba:	80 91 d9 02 	lds	r24, 0x02D9
     9be:	68 2f       	mov	r22, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 a9 04 	call	0x952	; 0x952 <oled_goto_xy>
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <oled_putchar>:

void oled_putchar( char c){
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <oled_putchar+0x6>
     9d2:	1f 92       	push	r1
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	c = (c-' ');
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	80 52       	subi	r24, 0x20	; 32
     9de:	8b 83       	std	Y+3, r24	; 0x03
	current_col_address+=CHA_WIDTH;
     9e0:	80 91 d8 02 	lds	r24, 0x02D8
     9e4:	8a 5f       	subi	r24, 0xFA	; 250
     9e6:	80 93 d8 02 	sts	0x02D8, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE-2){
     9ea:	80 91 d8 02 	lds	r24, 0x02D8
     9ee:	86 36       	cpi	r24, 0x66	; 102
     9f0:	10 f0       	brcs	.+4      	; 0x9f6 <oled_putchar+0x2a>
		//current_col_address = 0;
		oled_goto_nextln();
     9f2:	0e 94 ce 04 	call	0x99c	; 0x99c <oled_goto_nextln>
	}


	for(i = 0; i < 5; i++){
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	19 82       	std	Y+1, r1	; 0x01
     9fa:	19 c0       	rjmp	.+50     	; 0xa2e <oled_putchar+0x62>
		 oled_wr_d(font[(int)c][i]);
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	28 2f       	mov	r18, r24
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	c9 01       	movw	r24, r18
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	82 0f       	add	r24, r18
     a0e:	93 1f       	adc	r25, r19
     a10:	29 81       	ldd	r18, Y+1	; 0x01
     a12:	3a 81       	ldd	r19, Y+2	; 0x02
     a14:	82 0f       	add	r24, r18
     a16:	93 1f       	adc	r25, r19
     a18:	85 5f       	subi	r24, 0xF5	; 245
     a1a:	9e 4f       	sbci	r25, 0xFE	; 254
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	0e 94 08 04 	call	0x810	; 0x810 <oled_wr_d>
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	85 30       	cpi	r24, 0x05	; 5
     a34:	91 05       	cpc	r25, r1
     a36:	14 f3       	brlt	.-60     	; 0x9fc <oled_putchar+0x30>
		 oled_wr_d(font[(int)c][i]);
	}
	oled_wr_d(0);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 08 04 	call	0x810	; 0x810 <oled_wr_d>
}
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <oled_set_inverse>:

void oled_set_inverse(void){
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
	oled_wr_cmd(0xa7);
     a52:	87 ea       	ldi	r24, 0xA7	; 167
     a54:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <oled_set_normal>:

void oled_set_normal(void){
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	oled_wr_cmd(0xa6);
     a66:	86 ea       	ldi	r24, 0xA6	; 166
     a68:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <oled_putstr>:

void oled_putstr( char * str){
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	00 d0       	rcall	.+0      	; 0xa78 <oled_putstr+0x6>
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	9a 83       	std	Y+2, r25	; 0x02
     a7e:	89 83       	std	Y+1, r24	; 0x01
	while(*str)
     a80:	0b c0       	rjmp	.+22     	; 0xa98 <oled_putstr+0x26>
		oled_putchar(*str++);
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	9c 01       	movw	r18, r24
     a88:	2f 5f       	subi	r18, 0xFF	; 255
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	3a 83       	std	Y+2, r19	; 0x02
     a8e:	29 83       	std	Y+1, r18	; 0x01
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	0e 94 e6 04 	call	0x9cc	; 0x9cc <oled_putchar>
void oled_set_normal(void){
	oled_wr_cmd(0xa6);
}

void oled_putstr( char * str){
	while(*str)
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	88 23       	and	r24, r24
     aa2:	79 f7       	brne	.-34     	; 0xa82 <oled_putstr+0x10>
		oled_putchar(*str++);
}
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <oled_clear>:
void oled_clear(void){
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <oled_clear+0x6>
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
	current_col_address = 0;
     ab8:	10 92 d8 02 	sts	0x02D8, r1
	current_pag_address = 0;
     abc:	10 92 d9 02 	sts	0x02D9, r1
	oled_wr_cmd(0xae); // off
     ac0:	8e ea       	ldi	r24, 0xAE	; 174
     ac2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	//
	oled_wr_cmd(0x21);
     ac6:	81 e2       	ldi	r24, 0x21	; 33
     ac8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(1);
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(126);
     ad2:	8e e7       	ldi	r24, 0x7E	; 126
     ad4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x22);
     ad8:	82 e2       	ldi	r24, 0x22	; 34
     ada:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0);
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(7);
     ae4:	87 e0       	ldi	r24, 0x07	; 7
     ae6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x40);
     aea:	80 e4       	ldi	r24, 0x40	; 64
     aec:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	int temp;
	for(temp = 0; temp < 8*126; temp++){
     af0:	1a 82       	std	Y+2, r1	; 0x02
     af2:	19 82       	std	Y+1, r1	; 0x01
     af4:	08 c0       	rjmp	.+16     	; 0xb06 <oled_clear+0x58>
		oled_wr_d(0x00);
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 08 04 	call	0x810	; 0x810 <oled_wr_d>
	oled_wr_cmd(0x22);
	oled_wr_cmd(0);
	oled_wr_cmd(7);
	oled_wr_cmd(0x40);
	int temp;
	for(temp = 0; temp < 8*126; temp++){
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	9a 83       	std	Y+2, r25	; 0x02
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	80 3f       	cpi	r24, 0xF0	; 240
     b0c:	23 e0       	ldi	r18, 0x03	; 3
     b0e:	92 07       	cpc	r25, r18
     b10:	94 f3       	brlt	.-28     	; 0xaf6 <oled_clear+0x48>
		oled_wr_d(0x00);
	}
	oled_wr_cmd(0x21);
     b12:	81 e2       	ldi	r24, 0x21	; 33
     b14:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(START_COL);
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(END_COL);
     b1e:	89 e7       	ldi	r24, 0x79	; 121
     b20:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x22);
     b24:	82 e2       	ldi	r24, 0x22	; 34
     b26:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(START_PAGE);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(END_PAGE);
     b30:	86 e0       	ldi	r24, 0x06	; 6
     b32:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0x7c);
     b36:	8c e7       	ldi	r24, 0x7C	; 124
     b38:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
	oled_wr_cmd(0xaf); // on
     b3c:	8f ea       	ldi	r24, 0xAF	; 175
     b3e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <oled_wr_cmd>
}
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <oled_putchar_printf>:

int oled_putchar_printf(char var, FILE *stream){
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	00 d0       	rcall	.+0      	; 0xb52 <oled_putchar_printf+0x6>
     b52:	1f 92       	push	r1
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	7b 83       	std	Y+3, r23	; 0x03
     b5c:	6a 83       	std	Y+2, r22	; 0x02
	if(var == '\r'||var =='\n'){
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8d 30       	cpi	r24, 0x0D	; 13
     b62:	19 f0       	breq	.+6      	; 0xb6a <oled_putchar_printf+0x1e>
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	8a 30       	cpi	r24, 0x0A	; 10
     b68:	29 f4       	brne	.+10     	; 0xb74 <oled_putchar_printf+0x28>
		oled_goto_nextln();
     b6a:	0e 94 ce 04 	call	0x99c	; 0x99c <oled_goto_nextln>
		return 0;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <oled_putchar_printf+0x32>
	}

	oled_putchar(var);
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	0e 94 e6 04 	call	0x9cc	; 0x9cc <oled_putchar>
	return 0;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
}
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <usart_init>:


/********************************************************************************
                                usart Related
********************************************************************************/
void usart_init( uint16_t ubrr) {
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <usart_init+0x6>
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	9a 83       	std	Y+2, r25	; 0x02
     b96:	89 83       	std	Y+1, r24	; 0x01
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
     b98:	80 e4       	ldi	r24, 0x40	; 64
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	29 81       	ldd	r18, Y+1	; 0x01
     b9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ba0:	23 2f       	mov	r18, r19
     ba2:	33 27       	eor	r19, r19
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18
	UBRRL = (uint8_t)ubrr;
     ba8:	89 e2       	ldi	r24, 0x29	; 41
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	29 81       	ldd	r18, Y+1	; 0x01
     bae:	fc 01       	movw	r30, r24
     bb0:	20 83       	st	Z, r18
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
     bb2:	8a e2       	ldi	r24, 0x2A	; 42
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	28 e1       	ldi	r18, 0x18	; 24
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	26 e8       	ldi	r18, 0x86	; 134
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <usart_putchar>:

void usart_putchar(char data) {
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	1f 92       	push	r1
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
     bdc:	00 00       	nop
     bde:	8b e2       	ldi	r24, 0x2B	; 43
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	80 72       	andi	r24, 0x20	; 32
     bec:	99 27       	eor	r25, r25
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	b1 f3       	breq	.-20     	; 0xbde <usart_putchar+0xe>
	// Start transmission
	UDR = data;
     bf2:	8c e2       	ldi	r24, 0x2C	; 44
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	29 81       	ldd	r18, Y+1	; 0x01
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18
}
     bfc:	0f 90       	pop	r0
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <usart_getchar>:

char usart_getchar(void) {
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
	// Wait for incomming data
	while ( !(UCSRA & (_BV(RXC))) );
     c0c:	00 00       	nop
     c0e:	8b e2       	ldi	r24, 0x2B	; 43
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	88 23       	and	r24, r24
     c18:	d4 f7       	brge	.-12     	; 0xc0e <usart_getchar+0xa>
	// Return the data
	return UDR;
     c1a:	8c e2       	ldi	r24, 0x2C	; 44
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <usart_pstr>:

void usart_pstr(char *s) {
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <usart_pstr+0x6>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
    // loop through entire string
	while (*s) {
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <usart_pstr+0x26>
        usart_putchar(*s);
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart_putchar>
        s++;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void usart_pstr(char *s) {
    // loop through entire string
	while (*s) {
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	79 f7       	brne	.-34     	; 0xc38 <usart_pstr+0x10>
        usart_putchar(*s);
        s++;
    }
}
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <usart_putchar_printf>:

int usart_putchar_printf(char var, FILE *stream) {
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 d0       	rcall	.+0      	; 0xc6a <usart_putchar_printf+0x6>
     c6a:	1f 92       	push	r1
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	7b 83       	std	Y+3, r23	; 0x03
     c74:	6a 83       	std	Y+2, r22	; 0x02
    // translate \n to \r for br@y++ terminal
    if (var == '\n') usart_putchar('\r');
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	8a 30       	cpi	r24, 0x0A	; 10
     c7a:	19 f4       	brne	.+6      	; 0xc82 <usart_putchar_printf+0x1e>
     c7c:	8d e0       	ldi	r24, 0x0D	; 13
     c7e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart_putchar>
    usart_putchar(var);
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart_putchar>
    return 0;
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <__cmpsf2>:
     c98:	97 d0       	rcall	.+302    	; 0xdc8 <__fp_cmp>
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <__cmpsf2+0x6>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	08 95       	ret

00000ca0 <__divsf3>:
     ca0:	0c d0       	rcall	.+24     	; 0xcba <__divsf3x>
     ca2:	cd c0       	rjmp	.+410    	; 0xe3e <__fp_round>
     ca4:	c5 d0       	rcall	.+394    	; 0xe30 <__fp_pscB>
     ca6:	40 f0       	brcs	.+16     	; 0xcb8 <__divsf3+0x18>
     ca8:	bc d0       	rcall	.+376    	; 0xe22 <__fp_pscA>
     caa:	30 f0       	brcs	.+12     	; 0xcb8 <__divsf3+0x18>
     cac:	21 f4       	brne	.+8      	; 0xcb6 <__divsf3+0x16>
     cae:	5f 3f       	cpi	r21, 0xFF	; 255
     cb0:	19 f0       	breq	.+6      	; 0xcb8 <__divsf3+0x18>
     cb2:	ae c0       	rjmp	.+348    	; 0xe10 <__fp_inf>
     cb4:	51 11       	cpse	r21, r1
     cb6:	f7 c0       	rjmp	.+494    	; 0xea6 <__fp_szero>
     cb8:	b1 c0       	rjmp	.+354    	; 0xe1c <__fp_nan>

00000cba <__divsf3x>:
     cba:	d2 d0       	rcall	.+420    	; 0xe60 <__fp_split3>
     cbc:	98 f3       	brcs	.-26     	; 0xca4 <__divsf3+0x4>

00000cbe <__divsf3_pse>:
     cbe:	99 23       	and	r25, r25
     cc0:	c9 f3       	breq	.-14     	; 0xcb4 <__divsf3+0x14>
     cc2:	55 23       	and	r21, r21
     cc4:	b1 f3       	breq	.-20     	; 0xcb2 <__divsf3+0x12>
     cc6:	95 1b       	sub	r25, r21
     cc8:	55 0b       	sbc	r21, r21
     cca:	bb 27       	eor	r27, r27
     ccc:	aa 27       	eor	r26, r26
     cce:	62 17       	cp	r22, r18
     cd0:	73 07       	cpc	r23, r19
     cd2:	84 07       	cpc	r24, r20
     cd4:	38 f0       	brcs	.+14     	; 0xce4 <__divsf3_pse+0x26>
     cd6:	9f 5f       	subi	r25, 0xFF	; 255
     cd8:	5f 4f       	sbci	r21, 0xFF	; 255
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	44 1f       	adc	r20, r20
     ce0:	aa 1f       	adc	r26, r26
     ce2:	a9 f3       	breq	.-22     	; 0xcce <__divsf3_pse+0x10>
     ce4:	33 d0       	rcall	.+102    	; 0xd4c <__divsf3_pse+0x8e>
     ce6:	0e 2e       	mov	r0, r30
     ce8:	3a f0       	brmi	.+14     	; 0xcf8 <__divsf3_pse+0x3a>
     cea:	e0 e8       	ldi	r30, 0x80	; 128
     cec:	30 d0       	rcall	.+96     	; 0xd4e <__divsf3_pse+0x90>
     cee:	91 50       	subi	r25, 0x01	; 1
     cf0:	50 40       	sbci	r21, 0x00	; 0
     cf2:	e6 95       	lsr	r30
     cf4:	00 1c       	adc	r0, r0
     cf6:	ca f7       	brpl	.-14     	; 0xcea <__divsf3_pse+0x2c>
     cf8:	29 d0       	rcall	.+82     	; 0xd4c <__divsf3_pse+0x8e>
     cfa:	fe 2f       	mov	r31, r30
     cfc:	27 d0       	rcall	.+78     	; 0xd4c <__divsf3_pse+0x8e>
     cfe:	66 0f       	add	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	88 1f       	adc	r24, r24
     d04:	bb 1f       	adc	r27, r27
     d06:	26 17       	cp	r18, r22
     d08:	37 07       	cpc	r19, r23
     d0a:	48 07       	cpc	r20, r24
     d0c:	ab 07       	cpc	r26, r27
     d0e:	b0 e8       	ldi	r27, 0x80	; 128
     d10:	09 f0       	breq	.+2      	; 0xd14 <__divsf3_pse+0x56>
     d12:	bb 0b       	sbc	r27, r27
     d14:	80 2d       	mov	r24, r0
     d16:	bf 01       	movw	r22, r30
     d18:	ff 27       	eor	r31, r31
     d1a:	93 58       	subi	r25, 0x83	; 131
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
     d1e:	2a f0       	brmi	.+10     	; 0xd2a <__divsf3_pse+0x6c>
     d20:	9e 3f       	cpi	r25, 0xFE	; 254
     d22:	51 05       	cpc	r21, r1
     d24:	68 f0       	brcs	.+26     	; 0xd40 <__divsf3_pse+0x82>
     d26:	74 c0       	rjmp	.+232    	; 0xe10 <__fp_inf>
     d28:	be c0       	rjmp	.+380    	; 0xea6 <__fp_szero>
     d2a:	5f 3f       	cpi	r21, 0xFF	; 255
     d2c:	ec f3       	brlt	.-6      	; 0xd28 <__divsf3_pse+0x6a>
     d2e:	98 3e       	cpi	r25, 0xE8	; 232
     d30:	dc f3       	brlt	.-10     	; 0xd28 <__divsf3_pse+0x6a>
     d32:	86 95       	lsr	r24
     d34:	77 95       	ror	r23
     d36:	67 95       	ror	r22
     d38:	b7 95       	ror	r27
     d3a:	f7 95       	ror	r31
     d3c:	9f 5f       	subi	r25, 0xFF	; 255
     d3e:	c9 f7       	brne	.-14     	; 0xd32 <__divsf3_pse+0x74>
     d40:	88 0f       	add	r24, r24
     d42:	91 1d       	adc	r25, r1
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	97 f9       	bld	r25, 7
     d4a:	08 95       	ret
     d4c:	e1 e0       	ldi	r30, 0x01	; 1
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	bb 1f       	adc	r27, r27
     d56:	62 17       	cp	r22, r18
     d58:	73 07       	cpc	r23, r19
     d5a:	84 07       	cpc	r24, r20
     d5c:	ba 07       	cpc	r27, r26
     d5e:	20 f0       	brcs	.+8      	; 0xd68 <__divsf3_pse+0xaa>
     d60:	62 1b       	sub	r22, r18
     d62:	73 0b       	sbc	r23, r19
     d64:	84 0b       	sbc	r24, r20
     d66:	ba 0b       	sbc	r27, r26
     d68:	ee 1f       	adc	r30, r30
     d6a:	88 f7       	brcc	.-30     	; 0xd4e <__divsf3_pse+0x90>
     d6c:	e0 95       	com	r30
     d6e:	08 95       	ret

00000d70 <__fixunssfsi>:
     d70:	7f d0       	rcall	.+254    	; 0xe70 <__fp_splitA>
     d72:	88 f0       	brcs	.+34     	; 0xd96 <__fixunssfsi+0x26>
     d74:	9f 57       	subi	r25, 0x7F	; 127
     d76:	90 f0       	brcs	.+36     	; 0xd9c <__fixunssfsi+0x2c>
     d78:	b9 2f       	mov	r27, r25
     d7a:	99 27       	eor	r25, r25
     d7c:	b7 51       	subi	r27, 0x17	; 23
     d7e:	a0 f0       	brcs	.+40     	; 0xda8 <__fixunssfsi+0x38>
     d80:	d1 f0       	breq	.+52     	; 0xdb6 <__fixunssfsi+0x46>
     d82:	66 0f       	add	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	88 1f       	adc	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	1a f0       	brmi	.+6      	; 0xd92 <__fixunssfsi+0x22>
     d8c:	ba 95       	dec	r27
     d8e:	c9 f7       	brne	.-14     	; 0xd82 <__fixunssfsi+0x12>
     d90:	12 c0       	rjmp	.+36     	; 0xdb6 <__fixunssfsi+0x46>
     d92:	b1 30       	cpi	r27, 0x01	; 1
     d94:	81 f0       	breq	.+32     	; 0xdb6 <__fixunssfsi+0x46>
     d96:	86 d0       	rcall	.+268    	; 0xea4 <__fp_zero>
     d98:	b1 e0       	ldi	r27, 0x01	; 1
     d9a:	08 95       	ret
     d9c:	83 c0       	rjmp	.+262    	; 0xea4 <__fp_zero>
     d9e:	67 2f       	mov	r22, r23
     da0:	78 2f       	mov	r23, r24
     da2:	88 27       	eor	r24, r24
     da4:	b8 5f       	subi	r27, 0xF8	; 248
     da6:	39 f0       	breq	.+14     	; 0xdb6 <__fixunssfsi+0x46>
     da8:	b9 3f       	cpi	r27, 0xF9	; 249
     daa:	cc f3       	brlt	.-14     	; 0xd9e <__fixunssfsi+0x2e>
     dac:	86 95       	lsr	r24
     dae:	77 95       	ror	r23
     db0:	67 95       	ror	r22
     db2:	b3 95       	inc	r27
     db4:	d9 f7       	brne	.-10     	; 0xdac <__fixunssfsi+0x3c>
     db6:	3e f4       	brtc	.+14     	; 0xdc6 <__fixunssfsi+0x56>
     db8:	90 95       	com	r25
     dba:	80 95       	com	r24
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	08 95       	ret

00000dc8 <__fp_cmp>:
     dc8:	99 0f       	add	r25, r25
     dca:	00 08       	sbc	r0, r0
     dcc:	55 0f       	add	r21, r21
     dce:	aa 0b       	sbc	r26, r26
     dd0:	e0 e8       	ldi	r30, 0x80	; 128
     dd2:	fe ef       	ldi	r31, 0xFE	; 254
     dd4:	16 16       	cp	r1, r22
     dd6:	17 06       	cpc	r1, r23
     dd8:	e8 07       	cpc	r30, r24
     dda:	f9 07       	cpc	r31, r25
     ddc:	c0 f0       	brcs	.+48     	; 0xe0e <__fp_cmp+0x46>
     dde:	12 16       	cp	r1, r18
     de0:	13 06       	cpc	r1, r19
     de2:	e4 07       	cpc	r30, r20
     de4:	f5 07       	cpc	r31, r21
     de6:	98 f0       	brcs	.+38     	; 0xe0e <__fp_cmp+0x46>
     de8:	62 1b       	sub	r22, r18
     dea:	73 0b       	sbc	r23, r19
     dec:	84 0b       	sbc	r24, r20
     dee:	95 0b       	sbc	r25, r21
     df0:	39 f4       	brne	.+14     	; 0xe00 <__fp_cmp+0x38>
     df2:	0a 26       	eor	r0, r26
     df4:	61 f0       	breq	.+24     	; 0xe0e <__fp_cmp+0x46>
     df6:	23 2b       	or	r18, r19
     df8:	24 2b       	or	r18, r20
     dfa:	25 2b       	or	r18, r21
     dfc:	21 f4       	brne	.+8      	; 0xe06 <__fp_cmp+0x3e>
     dfe:	08 95       	ret
     e00:	0a 26       	eor	r0, r26
     e02:	09 f4       	brne	.+2      	; 0xe06 <__fp_cmp+0x3e>
     e04:	a1 40       	sbci	r26, 0x01	; 1
     e06:	a6 95       	lsr	r26
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	81 1d       	adc	r24, r1
     e0c:	81 1d       	adc	r24, r1
     e0e:	08 95       	ret

00000e10 <__fp_inf>:
     e10:	97 f9       	bld	r25, 7
     e12:	9f 67       	ori	r25, 0x7F	; 127
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	08 95       	ret

00000e1c <__fp_nan>:
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	80 ec       	ldi	r24, 0xC0	; 192
     e20:	08 95       	ret

00000e22 <__fp_pscA>:
     e22:	00 24       	eor	r0, r0
     e24:	0a 94       	dec	r0
     e26:	16 16       	cp	r1, r22
     e28:	17 06       	cpc	r1, r23
     e2a:	18 06       	cpc	r1, r24
     e2c:	09 06       	cpc	r0, r25
     e2e:	08 95       	ret

00000e30 <__fp_pscB>:
     e30:	00 24       	eor	r0, r0
     e32:	0a 94       	dec	r0
     e34:	12 16       	cp	r1, r18
     e36:	13 06       	cpc	r1, r19
     e38:	14 06       	cpc	r1, r20
     e3a:	05 06       	cpc	r0, r21
     e3c:	08 95       	ret

00000e3e <__fp_round>:
     e3e:	09 2e       	mov	r0, r25
     e40:	03 94       	inc	r0
     e42:	00 0c       	add	r0, r0
     e44:	11 f4       	brne	.+4      	; 0xe4a <__fp_round+0xc>
     e46:	88 23       	and	r24, r24
     e48:	52 f0       	brmi	.+20     	; 0xe5e <__fp_round+0x20>
     e4a:	bb 0f       	add	r27, r27
     e4c:	40 f4       	brcc	.+16     	; 0xe5e <__fp_round+0x20>
     e4e:	bf 2b       	or	r27, r31
     e50:	11 f4       	brne	.+4      	; 0xe56 <__fp_round+0x18>
     e52:	60 ff       	sbrs	r22, 0
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <__fp_round+0x20>
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	08 95       	ret

00000e60 <__fp_split3>:
     e60:	57 fd       	sbrc	r21, 7
     e62:	90 58       	subi	r25, 0x80	; 128
     e64:	44 0f       	add	r20, r20
     e66:	55 1f       	adc	r21, r21
     e68:	59 f0       	breq	.+22     	; 0xe80 <__fp_splitA+0x10>
     e6a:	5f 3f       	cpi	r21, 0xFF	; 255
     e6c:	71 f0       	breq	.+28     	; 0xe8a <__fp_splitA+0x1a>
     e6e:	47 95       	ror	r20

00000e70 <__fp_splitA>:
     e70:	88 0f       	add	r24, r24
     e72:	97 fb       	bst	r25, 7
     e74:	99 1f       	adc	r25, r25
     e76:	61 f0       	breq	.+24     	; 0xe90 <__fp_splitA+0x20>
     e78:	9f 3f       	cpi	r25, 0xFF	; 255
     e7a:	79 f0       	breq	.+30     	; 0xe9a <__fp_splitA+0x2a>
     e7c:	87 95       	ror	r24
     e7e:	08 95       	ret
     e80:	12 16       	cp	r1, r18
     e82:	13 06       	cpc	r1, r19
     e84:	14 06       	cpc	r1, r20
     e86:	55 1f       	adc	r21, r21
     e88:	f2 cf       	rjmp	.-28     	; 0xe6e <__fp_split3+0xe>
     e8a:	46 95       	lsr	r20
     e8c:	f1 df       	rcall	.-30     	; 0xe70 <__fp_splitA>
     e8e:	08 c0       	rjmp	.+16     	; 0xea0 <__fp_splitA+0x30>
     e90:	16 16       	cp	r1, r22
     e92:	17 06       	cpc	r1, r23
     e94:	18 06       	cpc	r1, r24
     e96:	99 1f       	adc	r25, r25
     e98:	f1 cf       	rjmp	.-30     	; 0xe7c <__fp_splitA+0xc>
     e9a:	86 95       	lsr	r24
     e9c:	71 05       	cpc	r23, r1
     e9e:	61 05       	cpc	r22, r1
     ea0:	08 94       	sec
     ea2:	08 95       	ret

00000ea4 <__fp_zero>:
     ea4:	e8 94       	clt

00000ea6 <__fp_szero>:
     ea6:	bb 27       	eor	r27, r27
     ea8:	66 27       	eor	r22, r22
     eaa:	77 27       	eor	r23, r23
     eac:	cb 01       	movw	r24, r22
     eae:	97 f9       	bld	r25, 7
     eb0:	08 95       	ret

00000eb2 <__gesf2>:
     eb2:	8a df       	rcall	.-236    	; 0xdc8 <__fp_cmp>
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <__gesf2+0x6>
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	08 95       	ret

00000eba <__mulsf3>:
     eba:	0b d0       	rcall	.+22     	; 0xed2 <__mulsf3x>
     ebc:	c0 cf       	rjmp	.-128    	; 0xe3e <__fp_round>
     ebe:	b1 df       	rcall	.-158    	; 0xe22 <__fp_pscA>
     ec0:	28 f0       	brcs	.+10     	; 0xecc <__mulsf3+0x12>
     ec2:	b6 df       	rcall	.-148    	; 0xe30 <__fp_pscB>
     ec4:	18 f0       	brcs	.+6      	; 0xecc <__mulsf3+0x12>
     ec6:	95 23       	and	r25, r21
     ec8:	09 f0       	breq	.+2      	; 0xecc <__mulsf3+0x12>
     eca:	a2 cf       	rjmp	.-188    	; 0xe10 <__fp_inf>
     ecc:	a7 cf       	rjmp	.-178    	; 0xe1c <__fp_nan>
     ece:	11 24       	eor	r1, r1
     ed0:	ea cf       	rjmp	.-44     	; 0xea6 <__fp_szero>

00000ed2 <__mulsf3x>:
     ed2:	c6 df       	rcall	.-116    	; 0xe60 <__fp_split3>
     ed4:	a0 f3       	brcs	.-24     	; 0xebe <__mulsf3+0x4>

00000ed6 <__mulsf3_pse>:
     ed6:	95 9f       	mul	r25, r21
     ed8:	d1 f3       	breq	.-12     	; 0xece <__mulsf3+0x14>
     eda:	95 0f       	add	r25, r21
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	55 1f       	adc	r21, r21
     ee0:	62 9f       	mul	r22, r18
     ee2:	f0 01       	movw	r30, r0
     ee4:	72 9f       	mul	r23, r18
     ee6:	bb 27       	eor	r27, r27
     ee8:	f0 0d       	add	r31, r0
     eea:	b1 1d       	adc	r27, r1
     eec:	63 9f       	mul	r22, r19
     eee:	aa 27       	eor	r26, r26
     ef0:	f0 0d       	add	r31, r0
     ef2:	b1 1d       	adc	r27, r1
     ef4:	aa 1f       	adc	r26, r26
     ef6:	64 9f       	mul	r22, r20
     ef8:	66 27       	eor	r22, r22
     efa:	b0 0d       	add	r27, r0
     efc:	a1 1d       	adc	r26, r1
     efe:	66 1f       	adc	r22, r22
     f00:	82 9f       	mul	r24, r18
     f02:	22 27       	eor	r18, r18
     f04:	b0 0d       	add	r27, r0
     f06:	a1 1d       	adc	r26, r1
     f08:	62 1f       	adc	r22, r18
     f0a:	73 9f       	mul	r23, r19
     f0c:	b0 0d       	add	r27, r0
     f0e:	a1 1d       	adc	r26, r1
     f10:	62 1f       	adc	r22, r18
     f12:	83 9f       	mul	r24, r19
     f14:	a0 0d       	add	r26, r0
     f16:	61 1d       	adc	r22, r1
     f18:	22 1f       	adc	r18, r18
     f1a:	74 9f       	mul	r23, r20
     f1c:	33 27       	eor	r19, r19
     f1e:	a0 0d       	add	r26, r0
     f20:	61 1d       	adc	r22, r1
     f22:	23 1f       	adc	r18, r19
     f24:	84 9f       	mul	r24, r20
     f26:	60 0d       	add	r22, r0
     f28:	21 1d       	adc	r18, r1
     f2a:	82 2f       	mov	r24, r18
     f2c:	76 2f       	mov	r23, r22
     f2e:	6a 2f       	mov	r22, r26
     f30:	11 24       	eor	r1, r1
     f32:	9f 57       	subi	r25, 0x7F	; 127
     f34:	50 40       	sbci	r21, 0x00	; 0
     f36:	8a f0       	brmi	.+34     	; 0xf5a <__mulsf3_pse+0x84>
     f38:	e1 f0       	breq	.+56     	; 0xf72 <__mulsf3_pse+0x9c>
     f3a:	88 23       	and	r24, r24
     f3c:	4a f0       	brmi	.+18     	; 0xf50 <__mulsf3_pse+0x7a>
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	bb 1f       	adc	r27, r27
     f44:	66 1f       	adc	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	50 40       	sbci	r21, 0x00	; 0
     f4e:	a9 f7       	brne	.-22     	; 0xf3a <__mulsf3_pse+0x64>
     f50:	9e 3f       	cpi	r25, 0xFE	; 254
     f52:	51 05       	cpc	r21, r1
     f54:	70 f0       	brcs	.+28     	; 0xf72 <__mulsf3_pse+0x9c>
     f56:	5c cf       	rjmp	.-328    	; 0xe10 <__fp_inf>
     f58:	a6 cf       	rjmp	.-180    	; 0xea6 <__fp_szero>
     f5a:	5f 3f       	cpi	r21, 0xFF	; 255
     f5c:	ec f3       	brlt	.-6      	; 0xf58 <__mulsf3_pse+0x82>
     f5e:	98 3e       	cpi	r25, 0xE8	; 232
     f60:	dc f3       	brlt	.-10     	; 0xf58 <__mulsf3_pse+0x82>
     f62:	86 95       	lsr	r24
     f64:	77 95       	ror	r23
     f66:	67 95       	ror	r22
     f68:	b7 95       	ror	r27
     f6a:	f7 95       	ror	r31
     f6c:	e7 95       	ror	r30
     f6e:	9f 5f       	subi	r25, 0xFF	; 255
     f70:	c1 f7       	brne	.-16     	; 0xf62 <__mulsf3_pse+0x8c>
     f72:	fe 2b       	or	r31, r30
     f74:	88 0f       	add	r24, r24
     f76:	91 1d       	adc	r25, r1
     f78:	96 95       	lsr	r25
     f7a:	87 95       	ror	r24
     f7c:	97 f9       	bld	r25, 7
     f7e:	08 95       	ret

00000f80 <fprintf>:
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 ec       	ldi	r30, 0xC6	; 198
     f86:	f7 e0       	ldi	r31, 0x07	; 7
     f88:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__prologue_saves__+0x20>
     f8c:	ae 01       	movw	r20, r28
     f8e:	47 5f       	subi	r20, 0xF7	; 247
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	6f 81       	ldd	r22, Y+7	; 0x07
     f94:	78 85       	ldd	r23, Y+8	; 0x08
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vfprintf>
     f9e:	e2 e0       	ldi	r30, 0x02	; 2
     fa0:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__epilogue_restores__+0x20>

00000fa4 <vfprintf>:
     fa4:	ac e0       	ldi	r26, 0x0C	; 12
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e8 ed       	ldi	r30, 0xD8	; 216
     faa:	f7 e0       	ldi	r31, 0x07	; 7
     fac:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__prologue_saves__>
     fb0:	7c 01       	movw	r14, r24
     fb2:	6b 01       	movw	r12, r22
     fb4:	8a 01       	movw	r16, r20
     fb6:	fc 01       	movw	r30, r24
     fb8:	17 82       	std	Z+7, r1	; 0x07
     fba:	16 82       	std	Z+6, r1	; 0x06
     fbc:	83 81       	ldd	r24, Z+3	; 0x03
     fbe:	81 ff       	sbrs	r24, 1
     fc0:	bd c1       	rjmp	.+890    	; 0x133c <vfprintf+0x398>
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	4c 01       	movw	r8, r24
     fc8:	f7 01       	movw	r30, r14
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	f6 01       	movw	r30, r12
     fce:	93 fd       	sbrc	r25, 3
     fd0:	85 91       	lpm	r24, Z+
     fd2:	93 ff       	sbrs	r25, 3
     fd4:	81 91       	ld	r24, Z+
     fd6:	6f 01       	movw	r12, r30
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <vfprintf+0x3a>
     fdc:	ab c1       	rjmp	.+854    	; 0x1334 <vfprintf+0x390>
     fde:	85 32       	cpi	r24, 0x25	; 37
     fe0:	39 f4       	brne	.+14     	; 0xff0 <vfprintf+0x4c>
     fe2:	93 fd       	sbrc	r25, 3
     fe4:	85 91       	lpm	r24, Z+
     fe6:	93 ff       	sbrs	r25, 3
     fe8:	81 91       	ld	r24, Z+
     fea:	6f 01       	movw	r12, r30
     fec:	85 32       	cpi	r24, 0x25	; 37
     fee:	29 f4       	brne	.+10     	; 0xffa <vfprintf+0x56>
     ff0:	b7 01       	movw	r22, r14
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     ff8:	e7 cf       	rjmp	.-50     	; 0xfc8 <vfprintf+0x24>
     ffa:	51 2c       	mov	r5, r1
     ffc:	31 2c       	mov	r3, r1
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	20 32       	cpi	r18, 0x20	; 32
    1002:	a0 f4       	brcc	.+40     	; 0x102c <vfprintf+0x88>
    1004:	8b 32       	cpi	r24, 0x2B	; 43
    1006:	69 f0       	breq	.+26     	; 0x1022 <vfprintf+0x7e>
    1008:	30 f4       	brcc	.+12     	; 0x1016 <vfprintf+0x72>
    100a:	80 32       	cpi	r24, 0x20	; 32
    100c:	59 f0       	breq	.+22     	; 0x1024 <vfprintf+0x80>
    100e:	83 32       	cpi	r24, 0x23	; 35
    1010:	69 f4       	brne	.+26     	; 0x102c <vfprintf+0x88>
    1012:	20 61       	ori	r18, 0x10	; 16
    1014:	2c c0       	rjmp	.+88     	; 0x106e <vfprintf+0xca>
    1016:	8d 32       	cpi	r24, 0x2D	; 45
    1018:	39 f0       	breq	.+14     	; 0x1028 <vfprintf+0x84>
    101a:	80 33       	cpi	r24, 0x30	; 48
    101c:	39 f4       	brne	.+14     	; 0x102c <vfprintf+0x88>
    101e:	21 60       	ori	r18, 0x01	; 1
    1020:	26 c0       	rjmp	.+76     	; 0x106e <vfprintf+0xca>
    1022:	22 60       	ori	r18, 0x02	; 2
    1024:	24 60       	ori	r18, 0x04	; 4
    1026:	23 c0       	rjmp	.+70     	; 0x106e <vfprintf+0xca>
    1028:	28 60       	ori	r18, 0x08	; 8
    102a:	21 c0       	rjmp	.+66     	; 0x106e <vfprintf+0xca>
    102c:	27 fd       	sbrc	r18, 7
    102e:	27 c0       	rjmp	.+78     	; 0x107e <vfprintf+0xda>
    1030:	30 ed       	ldi	r19, 0xD0	; 208
    1032:	38 0f       	add	r19, r24
    1034:	3a 30       	cpi	r19, 0x0A	; 10
    1036:	78 f4       	brcc	.+30     	; 0x1056 <vfprintf+0xb2>
    1038:	26 ff       	sbrs	r18, 6
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <vfprintf+0xa4>
    103c:	fa e0       	ldi	r31, 0x0A	; 10
    103e:	5f 9e       	mul	r5, r31
    1040:	30 0d       	add	r19, r0
    1042:	11 24       	eor	r1, r1
    1044:	53 2e       	mov	r5, r19
    1046:	13 c0       	rjmp	.+38     	; 0x106e <vfprintf+0xca>
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	38 9e       	mul	r3, r24
    104c:	30 0d       	add	r19, r0
    104e:	11 24       	eor	r1, r1
    1050:	33 2e       	mov	r3, r19
    1052:	20 62       	ori	r18, 0x20	; 32
    1054:	0c c0       	rjmp	.+24     	; 0x106e <vfprintf+0xca>
    1056:	8e 32       	cpi	r24, 0x2E	; 46
    1058:	21 f4       	brne	.+8      	; 0x1062 <vfprintf+0xbe>
    105a:	26 fd       	sbrc	r18, 6
    105c:	6b c1       	rjmp	.+726    	; 0x1334 <vfprintf+0x390>
    105e:	20 64       	ori	r18, 0x40	; 64
    1060:	06 c0       	rjmp	.+12     	; 0x106e <vfprintf+0xca>
    1062:	8c 36       	cpi	r24, 0x6C	; 108
    1064:	11 f4       	brne	.+4      	; 0x106a <vfprintf+0xc6>
    1066:	20 68       	ori	r18, 0x80	; 128
    1068:	02 c0       	rjmp	.+4      	; 0x106e <vfprintf+0xca>
    106a:	88 36       	cpi	r24, 0x68	; 104
    106c:	41 f4       	brne	.+16     	; 0x107e <vfprintf+0xda>
    106e:	f6 01       	movw	r30, r12
    1070:	93 fd       	sbrc	r25, 3
    1072:	85 91       	lpm	r24, Z+
    1074:	93 ff       	sbrs	r25, 3
    1076:	81 91       	ld	r24, Z+
    1078:	6f 01       	movw	r12, r30
    107a:	81 11       	cpse	r24, r1
    107c:	c1 cf       	rjmp	.-126    	; 0x1000 <vfprintf+0x5c>
    107e:	98 2f       	mov	r25, r24
    1080:	9f 7d       	andi	r25, 0xDF	; 223
    1082:	95 54       	subi	r25, 0x45	; 69
    1084:	93 30       	cpi	r25, 0x03	; 3
    1086:	28 f4       	brcc	.+10     	; 0x1092 <vfprintf+0xee>
    1088:	0c 5f       	subi	r16, 0xFC	; 252
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	ff e3       	ldi	r31, 0x3F	; 63
    108e:	f9 83       	std	Y+1, r31	; 0x01
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <vfprintf+0x108>
    1092:	83 36       	cpi	r24, 0x63	; 99
    1094:	31 f0       	breq	.+12     	; 0x10a2 <vfprintf+0xfe>
    1096:	83 37       	cpi	r24, 0x73	; 115
    1098:	71 f0       	breq	.+28     	; 0x10b6 <vfprintf+0x112>
    109a:	83 35       	cpi	r24, 0x53	; 83
    109c:	09 f0       	breq	.+2      	; 0x10a0 <vfprintf+0xfc>
    109e:	5b c0       	rjmp	.+182    	; 0x1156 <vfprintf+0x1b2>
    10a0:	22 c0       	rjmp	.+68     	; 0x10e6 <vfprintf+0x142>
    10a2:	f8 01       	movw	r30, r16
    10a4:	80 81       	ld	r24, Z
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	0e 5f       	subi	r16, 0xFE	; 254
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	44 24       	eor	r4, r4
    10ae:	43 94       	inc	r4
    10b0:	51 2c       	mov	r5, r1
    10b2:	54 01       	movw	r10, r8
    10b4:	15 c0       	rjmp	.+42     	; 0x10e0 <vfprintf+0x13c>
    10b6:	38 01       	movw	r6, r16
    10b8:	f2 e0       	ldi	r31, 0x02	; 2
    10ba:	6f 0e       	add	r6, r31
    10bc:	71 1c       	adc	r7, r1
    10be:	f8 01       	movw	r30, r16
    10c0:	a0 80       	ld	r10, Z
    10c2:	b1 80       	ldd	r11, Z+1	; 0x01
    10c4:	26 ff       	sbrs	r18, 6
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <vfprintf+0x12a>
    10c8:	65 2d       	mov	r22, r5
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0x12e>
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	7f ef       	ldi	r23, 0xFF	; 255
    10d2:	c5 01       	movw	r24, r10
    10d4:	2c 87       	std	Y+12, r18	; 0x0c
    10d6:	0e 94 af 09 	call	0x135e	; 0x135e <strnlen>
    10da:	2c 01       	movw	r4, r24
    10dc:	83 01       	movw	r16, r6
    10de:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e0:	2f 77       	andi	r18, 0x7F	; 127
    10e2:	22 2e       	mov	r2, r18
    10e4:	17 c0       	rjmp	.+46     	; 0x1114 <vfprintf+0x170>
    10e6:	38 01       	movw	r6, r16
    10e8:	f2 e0       	ldi	r31, 0x02	; 2
    10ea:	6f 0e       	add	r6, r31
    10ec:	71 1c       	adc	r7, r1
    10ee:	f8 01       	movw	r30, r16
    10f0:	a0 80       	ld	r10, Z
    10f2:	b1 80       	ldd	r11, Z+1	; 0x01
    10f4:	26 ff       	sbrs	r18, 6
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <vfprintf+0x15a>
    10f8:	65 2d       	mov	r22, r5
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <vfprintf+0x15e>
    10fe:	6f ef       	ldi	r22, 0xFF	; 255
    1100:	7f ef       	ldi	r23, 0xFF	; 255
    1102:	c5 01       	movw	r24, r10
    1104:	2c 87       	std	Y+12, r18	; 0x0c
    1106:	0e 94 a4 09 	call	0x1348	; 0x1348 <strnlen_P>
    110a:	2c 01       	movw	r4, r24
    110c:	2c 85       	ldd	r18, Y+12	; 0x0c
    110e:	20 68       	ori	r18, 0x80	; 128
    1110:	22 2e       	mov	r2, r18
    1112:	83 01       	movw	r16, r6
    1114:	23 fc       	sbrc	r2, 3
    1116:	1b c0       	rjmp	.+54     	; 0x114e <vfprintf+0x1aa>
    1118:	83 2d       	mov	r24, r3
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	48 16       	cp	r4, r24
    111e:	59 06       	cpc	r5, r25
    1120:	b0 f4       	brcc	.+44     	; 0x114e <vfprintf+0x1aa>
    1122:	b7 01       	movw	r22, r14
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    112c:	3a 94       	dec	r3
    112e:	f4 cf       	rjmp	.-24     	; 0x1118 <vfprintf+0x174>
    1130:	f5 01       	movw	r30, r10
    1132:	27 fc       	sbrc	r2, 7
    1134:	85 91       	lpm	r24, Z+
    1136:	27 fe       	sbrs	r2, 7
    1138:	81 91       	ld	r24, Z+
    113a:	5f 01       	movw	r10, r30
    113c:	b7 01       	movw	r22, r14
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    1144:	31 10       	cpse	r3, r1
    1146:	3a 94       	dec	r3
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	4f 1a       	sub	r4, r31
    114c:	51 08       	sbc	r5, r1
    114e:	41 14       	cp	r4, r1
    1150:	51 04       	cpc	r5, r1
    1152:	71 f7       	brne	.-36     	; 0x1130 <vfprintf+0x18c>
    1154:	e5 c0       	rjmp	.+458    	; 0x1320 <vfprintf+0x37c>
    1156:	84 36       	cpi	r24, 0x64	; 100
    1158:	11 f0       	breq	.+4      	; 0x115e <vfprintf+0x1ba>
    115a:	89 36       	cpi	r24, 0x69	; 105
    115c:	39 f5       	brne	.+78     	; 0x11ac <vfprintf+0x208>
    115e:	f8 01       	movw	r30, r16
    1160:	27 ff       	sbrs	r18, 7
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <vfprintf+0x1ce>
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	0c 5f       	subi	r16, 0xFC	; 252
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <vfprintf+0x1de>
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	88 27       	eor	r24, r24
    1178:	77 fd       	sbrc	r23, 7
    117a:	80 95       	com	r24
    117c:	98 2f       	mov	r25, r24
    117e:	0e 5f       	subi	r16, 0xFE	; 254
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	2f 76       	andi	r18, 0x6F	; 111
    1184:	b2 2e       	mov	r11, r18
    1186:	97 ff       	sbrs	r25, 7
    1188:	09 c0       	rjmp	.+18     	; 0x119c <vfprintf+0x1f8>
    118a:	90 95       	com	r25
    118c:	80 95       	com	r24
    118e:	70 95       	com	r23
    1190:	61 95       	neg	r22
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	8f 4f       	sbci	r24, 0xFF	; 255
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	20 68       	ori	r18, 0x80	; 128
    119a:	b2 2e       	mov	r11, r18
    119c:	2a e0       	ldi	r18, 0x0A	; 10
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	a4 01       	movw	r20, r8
    11a2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__ultoa_invert>
    11a6:	a8 2e       	mov	r10, r24
    11a8:	a8 18       	sub	r10, r8
    11aa:	44 c0       	rjmp	.+136    	; 0x1234 <vfprintf+0x290>
    11ac:	85 37       	cpi	r24, 0x75	; 117
    11ae:	29 f4       	brne	.+10     	; 0x11ba <vfprintf+0x216>
    11b0:	2f 7e       	andi	r18, 0xEF	; 239
    11b2:	b2 2e       	mov	r11, r18
    11b4:	2a e0       	ldi	r18, 0x0A	; 10
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	25 c0       	rjmp	.+74     	; 0x1204 <vfprintf+0x260>
    11ba:	f2 2f       	mov	r31, r18
    11bc:	f9 7f       	andi	r31, 0xF9	; 249
    11be:	bf 2e       	mov	r11, r31
    11c0:	8f 36       	cpi	r24, 0x6F	; 111
    11c2:	c1 f0       	breq	.+48     	; 0x11f4 <vfprintf+0x250>
    11c4:	18 f4       	brcc	.+6      	; 0x11cc <vfprintf+0x228>
    11c6:	88 35       	cpi	r24, 0x58	; 88
    11c8:	79 f0       	breq	.+30     	; 0x11e8 <vfprintf+0x244>
    11ca:	b4 c0       	rjmp	.+360    	; 0x1334 <vfprintf+0x390>
    11cc:	80 37       	cpi	r24, 0x70	; 112
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <vfprintf+0x232>
    11d0:	88 37       	cpi	r24, 0x78	; 120
    11d2:	21 f0       	breq	.+8      	; 0x11dc <vfprintf+0x238>
    11d4:	af c0       	rjmp	.+350    	; 0x1334 <vfprintf+0x390>
    11d6:	2f 2f       	mov	r18, r31
    11d8:	20 61       	ori	r18, 0x10	; 16
    11da:	b2 2e       	mov	r11, r18
    11dc:	b4 fe       	sbrs	r11, 4
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <vfprintf+0x256>
    11e0:	8b 2d       	mov	r24, r11
    11e2:	84 60       	ori	r24, 0x04	; 4
    11e4:	b8 2e       	mov	r11, r24
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <vfprintf+0x256>
    11e8:	24 ff       	sbrs	r18, 4
    11ea:	0a c0       	rjmp	.+20     	; 0x1200 <vfprintf+0x25c>
    11ec:	9f 2f       	mov	r25, r31
    11ee:	96 60       	ori	r25, 0x06	; 6
    11f0:	b9 2e       	mov	r11, r25
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <vfprintf+0x25c>
    11f4:	28 e0       	ldi	r18, 0x08	; 8
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <vfprintf+0x260>
    11fa:	20 e1       	ldi	r18, 0x10	; 16
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <vfprintf+0x260>
    1200:	20 e1       	ldi	r18, 0x10	; 16
    1202:	32 e0       	ldi	r19, 0x02	; 2
    1204:	f8 01       	movw	r30, r16
    1206:	b7 fe       	sbrs	r11, 7
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <vfprintf+0x274>
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	0c 5f       	subi	r16, 0xFC	; 252
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <vfprintf+0x280>
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 5f       	subi	r16, 0xFE	; 254
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	a4 01       	movw	r20, r8
    1226:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__ultoa_invert>
    122a:	a8 2e       	mov	r10, r24
    122c:	a8 18       	sub	r10, r8
    122e:	fb 2d       	mov	r31, r11
    1230:	ff 77       	andi	r31, 0x7F	; 127
    1232:	bf 2e       	mov	r11, r31
    1234:	b6 fe       	sbrs	r11, 6
    1236:	0b c0       	rjmp	.+22     	; 0x124e <vfprintf+0x2aa>
    1238:	2b 2d       	mov	r18, r11
    123a:	2e 7f       	andi	r18, 0xFE	; 254
    123c:	a5 14       	cp	r10, r5
    123e:	50 f4       	brcc	.+20     	; 0x1254 <vfprintf+0x2b0>
    1240:	b4 fe       	sbrs	r11, 4
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <vfprintf+0x2b4>
    1244:	b2 fc       	sbrc	r11, 2
    1246:	08 c0       	rjmp	.+16     	; 0x1258 <vfprintf+0x2b4>
    1248:	2b 2d       	mov	r18, r11
    124a:	2e 7e       	andi	r18, 0xEE	; 238
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <vfprintf+0x2b4>
    124e:	7a 2c       	mov	r7, r10
    1250:	2b 2d       	mov	r18, r11
    1252:	03 c0       	rjmp	.+6      	; 0x125a <vfprintf+0x2b6>
    1254:	7a 2c       	mov	r7, r10
    1256:	01 c0       	rjmp	.+2      	; 0x125a <vfprintf+0x2b6>
    1258:	75 2c       	mov	r7, r5
    125a:	24 ff       	sbrs	r18, 4
    125c:	0d c0       	rjmp	.+26     	; 0x1278 <vfprintf+0x2d4>
    125e:	fe 01       	movw	r30, r28
    1260:	ea 0d       	add	r30, r10
    1262:	f1 1d       	adc	r31, r1
    1264:	80 81       	ld	r24, Z
    1266:	80 33       	cpi	r24, 0x30	; 48
    1268:	11 f4       	brne	.+4      	; 0x126e <vfprintf+0x2ca>
    126a:	29 7e       	andi	r18, 0xE9	; 233
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <vfprintf+0x2dc>
    126e:	22 ff       	sbrs	r18, 2
    1270:	06 c0       	rjmp	.+12     	; 0x127e <vfprintf+0x2da>
    1272:	73 94       	inc	r7
    1274:	73 94       	inc	r7
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <vfprintf+0x2dc>
    1278:	82 2f       	mov	r24, r18
    127a:	86 78       	andi	r24, 0x86	; 134
    127c:	09 f0       	breq	.+2      	; 0x1280 <vfprintf+0x2dc>
    127e:	73 94       	inc	r7
    1280:	23 fd       	sbrc	r18, 3
    1282:	13 c0       	rjmp	.+38     	; 0x12aa <vfprintf+0x306>
    1284:	20 ff       	sbrs	r18, 0
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <vfprintf+0x2f0>
    1288:	5a 2c       	mov	r5, r10
    128a:	73 14       	cp	r7, r3
    128c:	18 f4       	brcc	.+6      	; 0x1294 <vfprintf+0x2f0>
    128e:	53 0c       	add	r5, r3
    1290:	57 18       	sub	r5, r7
    1292:	73 2c       	mov	r7, r3
    1294:	73 14       	cp	r7, r3
    1296:	68 f4       	brcc	.+26     	; 0x12b2 <vfprintf+0x30e>
    1298:	b7 01       	movw	r22, r14
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	2c 87       	std	Y+12, r18	; 0x0c
    12a0:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    12a4:	73 94       	inc	r7
    12a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    12a8:	f5 cf       	rjmp	.-22     	; 0x1294 <vfprintf+0x2f0>
    12aa:	73 14       	cp	r7, r3
    12ac:	10 f4       	brcc	.+4      	; 0x12b2 <vfprintf+0x30e>
    12ae:	37 18       	sub	r3, r7
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <vfprintf+0x310>
    12b2:	31 2c       	mov	r3, r1
    12b4:	24 ff       	sbrs	r18, 4
    12b6:	12 c0       	rjmp	.+36     	; 0x12dc <vfprintf+0x338>
    12b8:	b7 01       	movw	r22, r14
    12ba:	80 e3       	ldi	r24, 0x30	; 48
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	2c 87       	std	Y+12, r18	; 0x0c
    12c0:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    12c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c6:	22 ff       	sbrs	r18, 2
    12c8:	17 c0       	rjmp	.+46     	; 0x12f8 <vfprintf+0x354>
    12ca:	21 ff       	sbrs	r18, 1
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <vfprintf+0x330>
    12ce:	88 e5       	ldi	r24, 0x58	; 88
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <vfprintf+0x334>
    12d4:	88 e7       	ldi	r24, 0x78	; 120
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	b7 01       	movw	r22, r14
    12da:	0c c0       	rjmp	.+24     	; 0x12f4 <vfprintf+0x350>
    12dc:	82 2f       	mov	r24, r18
    12de:	86 78       	andi	r24, 0x86	; 134
    12e0:	59 f0       	breq	.+22     	; 0x12f8 <vfprintf+0x354>
    12e2:	21 fd       	sbrc	r18, 1
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <vfprintf+0x346>
    12e6:	80 e2       	ldi	r24, 0x20	; 32
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <vfprintf+0x348>
    12ea:	8b e2       	ldi	r24, 0x2B	; 43
    12ec:	27 fd       	sbrc	r18, 7
    12ee:	8d e2       	ldi	r24, 0x2D	; 45
    12f0:	b7 01       	movw	r22, r14
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    12f8:	a5 14       	cp	r10, r5
    12fa:	38 f4       	brcc	.+14     	; 0x130a <vfprintf+0x366>
    12fc:	b7 01       	movw	r22, r14
    12fe:	80 e3       	ldi	r24, 0x30	; 48
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    1306:	5a 94       	dec	r5
    1308:	f7 cf       	rjmp	.-18     	; 0x12f8 <vfprintf+0x354>
    130a:	aa 94       	dec	r10
    130c:	f4 01       	movw	r30, r8
    130e:	ea 0d       	add	r30, r10
    1310:	f1 1d       	adc	r31, r1
    1312:	80 81       	ld	r24, Z
    1314:	b7 01       	movw	r22, r14
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    131c:	a1 10       	cpse	r10, r1
    131e:	f5 cf       	rjmp	.-22     	; 0x130a <vfprintf+0x366>
    1320:	33 20       	and	r3, r3
    1322:	09 f4       	brne	.+2      	; 0x1326 <vfprintf+0x382>
    1324:	51 ce       	rjmp	.-862    	; 0xfc8 <vfprintf+0x24>
    1326:	b7 01       	movw	r22, r14
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
    1330:	3a 94       	dec	r3
    1332:	f6 cf       	rjmp	.-20     	; 0x1320 <vfprintf+0x37c>
    1334:	f7 01       	movw	r30, r14
    1336:	86 81       	ldd	r24, Z+6	; 0x06
    1338:	97 81       	ldd	r25, Z+7	; 0x07
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <vfprintf+0x39c>
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	2c 96       	adiw	r28, 0x0c	; 12
    1342:	e2 e1       	ldi	r30, 0x12	; 18
    1344:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__epilogue_restores__>

00001348 <strnlen_P>:
    1348:	fc 01       	movw	r30, r24
    134a:	05 90       	lpm	r0, Z+
    134c:	61 50       	subi	r22, 0x01	; 1
    134e:	70 40       	sbci	r23, 0x00	; 0
    1350:	01 10       	cpse	r0, r1
    1352:	d8 f7       	brcc	.-10     	; 0x134a <strnlen_P+0x2>
    1354:	80 95       	com	r24
    1356:	90 95       	com	r25
    1358:	8e 0f       	add	r24, r30
    135a:	9f 1f       	adc	r25, r31
    135c:	08 95       	ret

0000135e <strnlen>:
    135e:	fc 01       	movw	r30, r24
    1360:	61 50       	subi	r22, 0x01	; 1
    1362:	70 40       	sbci	r23, 0x00	; 0
    1364:	01 90       	ld	r0, Z+
    1366:	01 10       	cpse	r0, r1
    1368:	d8 f7       	brcc	.-10     	; 0x1360 <strnlen+0x2>
    136a:	80 95       	com	r24
    136c:	90 95       	com	r25
    136e:	8e 0f       	add	r24, r30
    1370:	9f 1f       	adc	r25, r31
    1372:	08 95       	ret

00001374 <fputc>:
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	18 2f       	mov	r17, r24
    137e:	09 2f       	mov	r16, r25
    1380:	eb 01       	movw	r28, r22
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 fd       	sbrc	r24, 1
    1386:	03 c0       	rjmp	.+6      	; 0x138e <fputc+0x1a>
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	9f ef       	ldi	r25, 0xFF	; 255
    138c:	20 c0       	rjmp	.+64     	; 0x13ce <fputc+0x5a>
    138e:	82 ff       	sbrs	r24, 2
    1390:	10 c0       	rjmp	.+32     	; 0x13b2 <fputc+0x3e>
    1392:	4e 81       	ldd	r20, Y+6	; 0x06
    1394:	5f 81       	ldd	r21, Y+7	; 0x07
    1396:	2c 81       	ldd	r18, Y+4	; 0x04
    1398:	3d 81       	ldd	r19, Y+5	; 0x05
    139a:	42 17       	cp	r20, r18
    139c:	53 07       	cpc	r21, r19
    139e:	7c f4       	brge	.+30     	; 0x13be <fputc+0x4a>
    13a0:	e8 81       	ld	r30, Y
    13a2:	f9 81       	ldd	r31, Y+1	; 0x01
    13a4:	9f 01       	movw	r18, r30
    13a6:	2f 5f       	subi	r18, 0xFF	; 255
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	39 83       	std	Y+1, r19	; 0x01
    13ac:	28 83       	st	Y, r18
    13ae:	10 83       	st	Z, r17
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <fputc+0x4a>
    13b2:	e8 85       	ldd	r30, Y+8	; 0x08
    13b4:	f9 85       	ldd	r31, Y+9	; 0x09
    13b6:	81 2f       	mov	r24, r17
    13b8:	09 95       	icall
    13ba:	89 2b       	or	r24, r25
    13bc:	29 f7       	brne	.-54     	; 0x1388 <fputc+0x14>
    13be:	2e 81       	ldd	r18, Y+6	; 0x06
    13c0:	3f 81       	ldd	r19, Y+7	; 0x07
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	3f 83       	std	Y+7, r19	; 0x07
    13c8:	2e 83       	std	Y+6, r18	; 0x06
    13ca:	81 2f       	mov	r24, r17
    13cc:	90 2f       	mov	r25, r16
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <__ultoa_invert>:
    13d8:	fa 01       	movw	r30, r20
    13da:	aa 27       	eor	r26, r26
    13dc:	28 30       	cpi	r18, 0x08	; 8
    13de:	51 f1       	breq	.+84     	; 0x1434 <__ultoa_invert+0x5c>
    13e0:	20 31       	cpi	r18, 0x10	; 16
    13e2:	81 f1       	breq	.+96     	; 0x1444 <__ultoa_invert+0x6c>
    13e4:	e8 94       	clt
    13e6:	6f 93       	push	r22
    13e8:	6e 7f       	andi	r22, 0xFE	; 254
    13ea:	6e 5f       	subi	r22, 0xFE	; 254
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	8f 4f       	sbci	r24, 0xFF	; 255
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	af 4f       	sbci	r26, 0xFF	; 255
    13f4:	b1 e0       	ldi	r27, 0x01	; 1
    13f6:	3e d0       	rcall	.+124    	; 0x1474 <__ultoa_invert+0x9c>
    13f8:	b4 e0       	ldi	r27, 0x04	; 4
    13fa:	3c d0       	rcall	.+120    	; 0x1474 <__ultoa_invert+0x9c>
    13fc:	67 0f       	add	r22, r23
    13fe:	78 1f       	adc	r23, r24
    1400:	89 1f       	adc	r24, r25
    1402:	9a 1f       	adc	r25, r26
    1404:	a1 1d       	adc	r26, r1
    1406:	68 0f       	add	r22, r24
    1408:	79 1f       	adc	r23, r25
    140a:	8a 1f       	adc	r24, r26
    140c:	91 1d       	adc	r25, r1
    140e:	a1 1d       	adc	r26, r1
    1410:	6a 0f       	add	r22, r26
    1412:	71 1d       	adc	r23, r1
    1414:	81 1d       	adc	r24, r1
    1416:	91 1d       	adc	r25, r1
    1418:	a1 1d       	adc	r26, r1
    141a:	20 d0       	rcall	.+64     	; 0x145c <__ultoa_invert+0x84>
    141c:	09 f4       	brne	.+2      	; 0x1420 <__ultoa_invert+0x48>
    141e:	68 94       	set
    1420:	3f 91       	pop	r19
    1422:	2a e0       	ldi	r18, 0x0A	; 10
    1424:	26 9f       	mul	r18, r22
    1426:	11 24       	eor	r1, r1
    1428:	30 19       	sub	r19, r0
    142a:	30 5d       	subi	r19, 0xD0	; 208
    142c:	31 93       	st	Z+, r19
    142e:	de f6       	brtc	.-74     	; 0x13e6 <__ultoa_invert+0xe>
    1430:	cf 01       	movw	r24, r30
    1432:	08 95       	ret
    1434:	46 2f       	mov	r20, r22
    1436:	47 70       	andi	r20, 0x07	; 7
    1438:	40 5d       	subi	r20, 0xD0	; 208
    143a:	41 93       	st	Z+, r20
    143c:	b3 e0       	ldi	r27, 0x03	; 3
    143e:	0f d0       	rcall	.+30     	; 0x145e <__ultoa_invert+0x86>
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__ultoa_invert+0x5c>
    1442:	f6 cf       	rjmp	.-20     	; 0x1430 <__ultoa_invert+0x58>
    1444:	46 2f       	mov	r20, r22
    1446:	4f 70       	andi	r20, 0x0F	; 15
    1448:	40 5d       	subi	r20, 0xD0	; 208
    144a:	4a 33       	cpi	r20, 0x3A	; 58
    144c:	18 f0       	brcs	.+6      	; 0x1454 <__ultoa_invert+0x7c>
    144e:	49 5d       	subi	r20, 0xD9	; 217
    1450:	31 fd       	sbrc	r19, 1
    1452:	40 52       	subi	r20, 0x20	; 32
    1454:	41 93       	st	Z+, r20
    1456:	02 d0       	rcall	.+4      	; 0x145c <__ultoa_invert+0x84>
    1458:	a9 f7       	brne	.-22     	; 0x1444 <__ultoa_invert+0x6c>
    145a:	ea cf       	rjmp	.-44     	; 0x1430 <__ultoa_invert+0x58>
    145c:	b4 e0       	ldi	r27, 0x04	; 4
    145e:	a6 95       	lsr	r26
    1460:	97 95       	ror	r25
    1462:	87 95       	ror	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	ba 95       	dec	r27
    146a:	c9 f7       	brne	.-14     	; 0x145e <__ultoa_invert+0x86>
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	61 05       	cpc	r22, r1
    1470:	71 05       	cpc	r23, r1
    1472:	08 95       	ret
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	0a 2e       	mov	r0, r26
    147a:	06 94       	lsr	r0
    147c:	57 95       	ror	r21
    147e:	47 95       	ror	r20
    1480:	37 95       	ror	r19
    1482:	27 95       	ror	r18
    1484:	ba 95       	dec	r27
    1486:	c9 f7       	brne	.-14     	; 0x147a <__ultoa_invert+0xa2>
    1488:	62 0f       	add	r22, r18
    148a:	73 1f       	adc	r23, r19
    148c:	84 1f       	adc	r24, r20
    148e:	95 1f       	adc	r25, r21
    1490:	a0 1d       	adc	r26, r0
    1492:	08 95       	ret

00001494 <__prologue_saves__>:
    1494:	2f 92       	push	r2
    1496:	3f 92       	push	r3
    1498:	4f 92       	push	r4
    149a:	5f 92       	push	r5
    149c:	6f 92       	push	r6
    149e:	7f 92       	push	r7
    14a0:	8f 92       	push	r8
    14a2:	9f 92       	push	r9
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	ca 1b       	sub	r28, r26
    14be:	db 0b       	sbc	r29, r27
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	09 94       	ijmp

000014cc <__epilogue_restores__>:
    14cc:	2a 88       	ldd	r2, Y+18	; 0x12
    14ce:	39 88       	ldd	r3, Y+17	; 0x11
    14d0:	48 88       	ldd	r4, Y+16	; 0x10
    14d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14da:	9b 84       	ldd	r9, Y+11	; 0x0b
    14dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    14de:	b9 84       	ldd	r11, Y+9	; 0x09
    14e0:	c8 84       	ldd	r12, Y+8	; 0x08
    14e2:	df 80       	ldd	r13, Y+7	; 0x07
    14e4:	ee 80       	ldd	r14, Y+6	; 0x06
    14e6:	fd 80       	ldd	r15, Y+5	; 0x05
    14e8:	0c 81       	ldd	r16, Y+4	; 0x04
    14ea:	1b 81       	ldd	r17, Y+3	; 0x03
    14ec:	aa 81       	ldd	r26, Y+2	; 0x02
    14ee:	b9 81       	ldd	r27, Y+1	; 0x01
    14f0:	ce 0f       	add	r28, r30
    14f2:	d1 1d       	adc	r29, r1
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	ed 01       	movw	r28, r26
    1500:	08 95       	ret

00001502 <_exit>:
    1502:	f8 94       	cli

00001504 <__stop_program>:
    1504:	ff cf       	rjmp	.-2      	; 0x1504 <__stop_program>
